<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title>this - 标签 - Xiaomu</title><link>https://blog.realjacket.site/tags/this/</link><description>this - 标签 - Xiaomu</description><generator>Hugo -- gohugo.io</generator><language>zh-CN</language><managingEditor>1762982273@qq.com (xiaomu)</managingEditor><webMaster>1762982273@qq.com (xiaomu)</webMaster><copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright><lastBuildDate>Wed, 02 Sep 2020 12:32:41 +0800</lastBuildDate><atom:link href="https://blog.realjacket.site/tags/this/" rel="self" type="application/rss+xml"/><item><title>关于this的一道面试题</title><link>https://blog.realjacket.site/posts/%E5%85%B3%E4%BA%8Ethis%E7%9A%84%E4%B8%80%E9%81%93%E9%9D%A2%E8%AF%95%E9%A2%98/</link><pubDate>Wed, 02 Sep 2020 12:32:41 +0800</pubDate><author>xiaomu</author><guid>https://blog.realjacket.site/posts/%E5%85%B3%E4%BA%8Ethis%E7%9A%84%E4%B8%80%E9%81%93%E9%9D%A2%E8%AF%95%E9%A2%98/</guid><description><![CDATA[<h1 id="关于-this-的一道面试题">关于 this 的一道面试题</h1>
<h2 id="问题">问题</h2>
<p>首先贴代码：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="line"><span class="cl"><span class="kd">let</span> <span class="nx">length</span> <span class="o">=</span> <span class="mi">10</span>
</span></span><span class="line"><span class="cl"><span class="kd">function</span> <span class="nx">fn</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">length</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="kd">let</span> <span class="nx">obj</span> <span class="o">=</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">length</span><span class="o">:</span> <span class="mi">5</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">	<span class="nx">method</span><span class="p">(</span><span class="nx">fn</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">fn</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">		<span class="nx">arguments</span><span class="p">[</span><span class="mi">0</span><span class="p">]()</span>
</span></span><span class="line"><span class="cl">	<span class="p">},</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nx">obj</span><span class="p">.</span><span class="nx">method</span><span class="p">(</span><span class="nx">fn</span><span class="p">,</span> <span class="mi">1</span><span class="p">)</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>请问最后打印出什么？</p>
<ul>
<li>第一个 fn()  不确定是什么，一般为 0/undefined。</li>
<li>第二个 arguments[0]()  为 2，是函数调用的实参个数。</li>
</ul>
<h2 id="分析">分析</h2>
<h3 id="函数的返回值是由什么决定的">函数的返回值是由什么决定的？</h3>
<ul>
<li>调用时输入的参数  params</li>
<li>定义时的环境  env</li>
</ul>
<p>那么 Js 函数调用时， <code>obj.method(fn,1)</code>  这个函数调用时，参数只有 fn 跟 1 么？</p>
<ul>
<li>隐式参数
<ol>
<li>arguments：传入函数所有参数（实参）的集合</li>
<li>this：执行上下文（就是一个对象），与函数调用相关联的对象，这个就跟定义时的环境有关。</li>
</ol>
</li>
<li>显式参数括号内的参数: fn、1</li>
</ul>
<h3 id="明确-this-的传入将-this-显式化">明确 this 的传入，将 this 显式化</h3>
<p>由于 this  的模糊性，通过 call  转化将 this  显式传入：</p>
<ul>
<li>obj.method(fn,1) ===&gt; obj.method.call(obj,fn,1)</li>
<li>fn() ===&gt; fn.call(undefined) //  这里默认为  this  为全局环境（window/global）</li>
<li>arguments<a
  href=""
  
  
  
  
  
  
>0</a> ===&gt; arguments[0].call(arguments)</li>
</ul>
<p>由上面可以看出：三个函数调用，传入的 this 。
注意： 这里需要注意 fn 作为参数传进来，相当于进行了一次隐式赋值，即 var fn = fn。即函数内部的 fn 等与 外面的 fn。</p>
<h3 id="关于-let-变量声明">关于  let  变量声明</h3>
<p>我们知道  var  声明的变量是全局变量，作用域为全局，通常挂在 window  下。let  声明的变量局部变量，mdn 中关于 let  是这么定义：“<strong>let</strong>  语句声明一个块级作用域的本地变量，并且可选的将其初始化为一个值。”但是如果在全局环境下进行 let  声明，这个变量会挂在  window  下么？在  mdn  中关于顶级环境的问题也给出了说明，“At the top level of programs and functions, <strong><code>let</code></strong>, unlike <strong><code>var</code></strong>, does not create a property on the global object.”说明不会挂载在 window  下。</p>
<h3 id="windowlength-到底是什么">window.length  到底是什么</h3>
<p>window.length  为当前页面中  ifram  的个数。</p>
<h2 id="延伸">延伸</h2>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="line"><span class="cl"><span class="kd">let</span> <span class="nx">length</span> <span class="o">=</span> <span class="mi">10</span>
</span></span><span class="line"><span class="cl"><span class="kd">function</span> <span class="nx">fn</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">length</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">length</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="kd">let</span> <span class="nx">obj</span> <span class="o">=</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">length</span><span class="o">:</span> <span class="mi">5</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">	<span class="nx">method</span><span class="p">(</span><span class="nx">fn</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="kd">let</span> <span class="nx">length</span> <span class="o">=</span> <span class="mi">3</span>
</span></span><span class="line"><span class="cl">		<span class="nx">fn</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">		<span class="nx">arguments</span><span class="p">[</span><span class="mi">0</span><span class="p">]()</span>
</span></span><span class="line"><span class="cl">		<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">length</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">		<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">length</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="p">},</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nx">obj</span><span class="p">.</span><span class="nx">method</span><span class="p">(</span><span class="nx">fn</span><span class="p">,</span> <span class="mi">1</span><span class="p">)</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h2 id="总结">总结</h2>
<ol>
<li>函数调用时的  this  为该函数的执行上下文。</li>
<li>函数调用默认会隐式的传两个参数，this  与  arguments</li>
<li>在不清楚  this  时，将  this  显示的传入。</li>
</ol>
]]></description></item></channel></rss>