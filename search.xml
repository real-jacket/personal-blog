<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>建一个本地mongdb数据库</title>
    <url>/2019/01/09/%E5%BB%BA%E4%B8%80%E4%B8%AA%E6%9C%AC%E5%9C%B0mongdb%E6%95%B0%E6%8D%AE%E5%BA%93/</url>
    <content><![CDATA[<h2 id="安装mongodb数据库"><a href="#安装mongodb数据库" class="headerlink" title="安装mongodb数据库"></a>安装mongodb数据库</h2><h3 id="安装包安装"><a href="#安装包安装" class="headerlink" title="安装包安装"></a>安装包安装</h3><p>进入<a href="https://www.mongodb.com/cn" target="_blank" rel="noopener">官网</a>，点击左上角Get MongoDB下载，进入中间的server界面，会自动匹配出对应的系统，下载对应的安装包，安装即可。<br>如果想看更详细的安装步骤，下载旁的侧边栏有Install Instructions。</p>
<h3 id="命令行安装"><a href="#命令行安装" class="headerlink" title="命令行安装"></a>命令行安装</h3><p>由于我是deepin系统，是基于debian的，而且个人更喜欢用命令行进行安装,于是找到了<a href="https://docs.mongodb.com/manual/tutorial/install-mongodb-on-debian/#install-mongodb-community-edition" target="_blank" rel="noopener">debian的安装指导</a><br><a id="more"></a></p>
<ol>
<li><p>导入mongodb 公共 GPG 密钥</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv 9DA31620334BD75D9DCB49F368818C72E52529D4</span><br></pre></td></tr></table></figure>
</li>
<li><p>创建列表文件<br>deepin是基于最新的debian，所以我这个是Debian 9的 </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">echo &quot;deb http://repo.mongodb.org/apt/debian stretch/mongodb-org/4.0 main&quot; | sudo tee /etc/apt/sources.list.d/mongodb-org-4.0.list</span><br></pre></td></tr></table></figure>
</li>
</ol>
<ol start="3">
<li><p>更新一下本地安装包数据<br><code>sudo apt-get update</code></p>
<blockquote>
<p>注意：此步不可省略，不然会导致报错，找不到mongodb包！</p>
</blockquote>
</li>
<li><p>安装mongoDB 包<br><code>sudo apt-get install -y mongodb-org</code></p>
</li>
</ol>
<p>至此，mongodb数据库算是安装成功了。官方文档还介绍了使用.tgztr包安装的方式，感兴趣的可以去官网看看。</p>
<h2 id="运行mongodb数据库"><a href="#运行mongodb数据库" class="headerlink" title="运行mongodb数据库"></a>运行mongodb数据库</h2><ul>
<li><p>启动mongodb<br><code>sudo service mongod start</code></p>
</li>
<li><p>检验mongodb是否启动成功<br><code>sudo cat /var/log/mongodb/mongod.log</code><br>这个文件纪录着mongodb的启动历史，所以当我们在最后一行看到一下内容，便是启动成功了<br><code>[initandlisten] waiting for connections on port 27017</code></p>
</li>
<li><p>运行mongodb<br><code>mongo</code><br>其实这个也可以作为mongodb是否启动成功的条件</p>
</li>
<li><p>停止mongodb运行<br><code>sudo service mongod stop</code></p>
</li>
<li><p>重启mongodb<br><code>sudo service mongod restart</code></p>
</li>
</ul>
<h2 id="robo-3T-mongodb可视化工具"><a href="#robo-3T-mongodb可视化工具" class="headerlink" title="robo 3T -mongodb可视化工具"></a>robo 3T -mongodb可视化工具</h2><p>虽然个人喜欢用命令行进行安装，因为这样方便简单，但是用命令行查看数据库就比较不方便了毕竟，查询条件多且复杂的话，命令行界面就不够友好了，这里介绍使用robo 3T，一个mongdb数据库可视化GUI工具。</p>
<h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>1、首先在<a href="https://robomongo.org/download" target="_blank" rel="noopener">robo 3T官网</a>下载相应安装包,然后使用tar命令进行解压：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">tar -xzf robo3t-1.2.1-linux-x86_64-3e50a65.tar.gz</span><br></pre></td></tr></table></figure>
<p>2、创建一个命令将所有文件全部拷贝过去</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo mkdir /usr/local/bin/robomongo</span><br><span class="line"></span><br><span class="line">sudo mv robo3t-1.2.1-linux-x86_64-3e50a65.tar.gz /usr/local/bin/robomongo</span><br></pre></td></tr></table></figure>
<p>3、进入文件robomongo文件目录，给robo 3T添加权限</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cd /usr/local/bin/robomongo/bin</span><br><span class="line"></span><br><span class="line">sudo chmod +x robo3t</span><br></pre></td></tr></table></figure>
<p>4、给robo 3T创建快捷启动命令</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo vi ~/.bashrc // 用vim编辑.bashrc文件</span><br><span class="line"></span><br><span class="line">alias robomongo=&quot;/usr/local/bin/robomongo/bin/robo3t&quot; // 在最后一行添加该命令,保存退出</span><br><span class="line"></span><br><span class="line">source ~/.bashrc // 使命令生效</span><br></pre></td></tr></table></figure>
<h3 id="连接mongdb数据库"><a href="#连接mongdb数据库" class="headerlink" title="连接mongdb数据库"></a>连接mongdb数据库</h3><p>1、首先按文章前面说的运行数据库，本地数据库运行：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo service mongod start</span><br><span class="line"></span><br><span class="line">mongo</span><br></pre></td></tr></table></figure>
<p>2、启动robo 3T进行连接</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">robomongo</span><br></pre></td></tr></table></figure>
<p>3、输入i地址与端口连接指定数据库<br>可以连接远程数据库</p>
<h2 id="基本的数据库操作"><a href="#基本的数据库操作" class="headerlink" title="基本的数据库操作"></a>基本的数据库操作</h2><h2 id="遇到的问题"><a href="#遇到的问题" class="headerlink" title="遇到的问题"></a>遇到的问题</h2>]]></content>
      <categories>
        <category>node</category>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>mongdb</tag>
      </tags>
  </entry>
  <entry>
    <title>hexo 博客转移</title>
    <url>/2019/01/02/hexo-%E5%8D%9A%E5%AE%A2%E8%BD%AC%E7%A7%BB/</url>
    <content><![CDATA[<p>最近觉得window下的命令行实在难看，即使是gitbash也无法拯救，毕竟一些乱码着实是要逼死我这种强迫症。于是下定决心，将笔记本里的另一个linux系统deepin作为主力系统，开始各方面的迁移。代码啥的都好说，毕竟有github托管，但是hexo博客就让人头疼了，对于我这个刚入行不久的小白，实在是不知道从何处下手。</p>
<h2 id="最蠢的办法"><a href="#最蠢的办法" class="headerlink" title="最蠢的办法"></a>最蠢的办法</h2><p>估计这个办法是只有我这种蠢人与懒人才能想出来吧，直接把windows下的hexo博客相关文件复制一份放到deepin下跑起来。跑之前，我猜测可能环境配置肯定会出问题，出人意料之外的，竟然成功跑起来了，没有出问题。毕竟从windows到linux，个人觉得主要还是环境配置问题吧,比如node版本，一些环境依赖，比如python版本号</p>
<a id="more"></a>
<h2 id="通过github保存配置文件"><a href="#通过github保存配置文件" class="headerlink" title="通过github保存配置文件"></a>通过github保存配置文件</h2><p>基本思路：将本地所有相关配置文件上传到github，然后clone到另一台电脑或者另一个系统，相关的配置文件都有了，理论上来说就是ok的。这样唯一的好处，就是基本可以在所有电脑里写博客后直接发布了。</p>
<h3 id="1、上传相关配置文件到github"><a href="#1、上传相关配置文件到github" class="headerlink" title="1、上传相关配置文件到github"></a>1、上传相关配置文件到github</h3><p>主要是配置文件，由于我怕出问题，基本把所有的相关配置文件都上传了，我的目录如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hexo</span><br><span class="line">|--scaffolds</span><br><span class="line">|--source</span><br><span class="line">|--themes</span><br><span class="line">|--.gitignore</span><br><span class="line">|--_config.yml</span><br><span class="line">|--package-lock.json</span><br><span class="line">|--package.json</span><br></pre></td></tr></table></figure>
<h3 id="2、在另一台电脑（系统）初始化一个hexo博客目录"><a href="#2、在另一台电脑（系统）初始化一个hexo博客目录" class="headerlink" title="2、在另一台电脑（系统）初始化一个hexo博客目录"></a>2、在另一台电脑（系统）初始化一个hexo博客目录</h3><p>因为各个电脑系统环境配置都不一样，所以首先得保证最基本的hexo博客能运行起来：<br>首先，安装<code>node</code>，<code>git</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install -g hexo-cli // 安装hexo命令工具</span><br><span class="line">hexo init &lt;folder&gt; // 初始化hexo博客目录</span><br><span class="line">cd &lt;folder&gt;</span><br><span class="line">npm install // 安装包依赖</span><br></pre></td></tr></table></figure>
<h3 id="3、从github上git-clone出hexo配置文件"><a href="#3、从github上git-clone出hexo配置文件" class="headerlink" title="3、从github上git clone出hexo配置文件"></a>3、从github上<code>git clone</code>出hexo配置文件</h3><p>注意clone的文件夹不要放在第二步创建的文件下，将clone的文件下的所有文件复制粘贴到第二步的初始化目录中，同名的文件选择覆盖掉。<br>然后，执行相关命令，如无意外即可跑起来了。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">// 以下是个人的博客操作,全部在第二步的博客目录下操作</span><br><span class="line">cd themes/next/</span><br><span class="line">npm i // 安装next主题包依赖</span><br><span class="line"></span><br><span class="line">cd ../../</span><br><span class="line">npm i // 执行全局配置包依赖</span><br><span class="line"></span><br><span class="line">hexo s // 本地测试hexo博客</span><br></pre></td></tr></table></figure>
<p>这样配置成功后，以后只需要把写的博客、相关的主题设置文件上传到github，其它的电脑直接从github上pull就ok了。</p>
<blockquote>
<p>注意:<br>千万不要将相关的环境配置文件提交，比如package.json，保持所有的电脑配置文件一致，不同的电脑本地进行配置，不然会导致不同的电脑环境相互冲突，需要重新配置环境。</p>
</blockquote>
<h2 id="遇到的问题"><a href="#遇到的问题" class="headerlink" title="遇到的问题"></a>遇到的问题</h2><h3 id="nodejieba模块安装出错（windows）"><a href="#nodejieba模块安装出错（windows）" class="headerlink" title="nodejieba模块安装出错（windows）"></a>nodejieba模块安装出错（windows）</h3><p>不同系统之间免不了出问题，最近在公司趁闲点写点博客，于是打算在公司的电脑按上述方法进行部署。结果报错，卡在nodejieba分词库安装失败，node-gyp rebuild 失败。</p>
<p>自然第一想法，谷歌搜索报错，找到<a href="https://github.com/Mrminfive/hexo-theme-skapp/issues/23" target="_blank" rel="noopener">nodejieba分词库安装问题</a>相关答案，顺着找到<a href="https://www.npmjs.com/package/node-gyp" target="_blank" rel="noopener">node-gyp官方文档</a>,原来是node-gyp的python版本只支持2.7，官方给出了前置安装的两个办法，人懒的我自然选择前一种方法<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install --global --production windows-build-tools</span><br><span class="line"></span><br><span class="line">npm install -g node-gyp</span><br></pre></td></tr></table></figure></p>
<p>安装完后，删掉node_modules,重新安装依赖，万事大吉，成功运行！至此，我这篇博客就是写到一般上传到github后，回家拉取继续写，顺利完成。</p>
<h3 id="themes文件git嵌套"><a href="#themes文件git嵌套" class="headerlink" title="themes文件git嵌套"></a>themes文件git嵌套</h3><p>由于nextz主题内的_config.yml也涉及到一些配置，为避免重新配置，最好把themes下的主题文件也上传到github。但是，由于themes下主题内部也存在git仓库，造成了git嵌套，自动被git忽略，所以要先着手解决git嵌套问题。</p>
<p>研究了一会，目前一种简单的办法，把themes内部的<code>.git</code>本地仓库删掉，这里要注意将next文件夹移出blog，然后移入，才能重新被git发现。这样我们就实现了themes主题配置的保存。</p>
<h3 id="执行hexo命令报错（deepin）"><a href="#执行hexo命令报错（deepin）" class="headerlink" title="执行hexo命令报错（deepin）"></a>执行hexo命令报错（deepin）</h3><p>执行<code>hexo s</code>命令报错：<code>Error: ENOSPC: no space left on device,</code><br>大概是指监听太多node_modules 嵌套了：max_user_watches，谷歌搜到相关<a href="https://github.com/npm/npm/issues/1131" target="_blank" rel="noopener">答案</a>,最终的解决办法：<a href="https://github.com/guard/listen/wiki/Increasing-the-amount-of-inotify-watchers" target="_blank" rel="noopener">增大最大监听数量</a><br>由于我是deepin系统，命令行执行：<br><code>echo fs.inotify.max_user_watches=524288 | sudo tee -a /etc/sysctl.conf &amp;&amp; sudo sysctl -p</code></p>
<h3 id="npm-install安装环境报错（deepin）"><a href="#npm-install安装环境报错（deepin）" class="headerlink" title="npm install安装环境报错（deepin）"></a>npm install安装环境报错（deepin）</h3><p>报错：<br><a href="mailto:`pngquant-bin@4.0.0" target="_blank" rel="noopener">`pngquant-bin@4.0.0</a> postinstall: node lib/install.js<code></code>Failed at the <a href="mailto:pngquant-bin@4.0.0" target="_blank" rel="noopener">pngquant-bin@4.0.0</a> postinstall script.<code>报错大概是指pngquant-bin这个模块运行出错。谷歌搜索答案，得知pngquant-bin在Linux下需要一些包libpng-dev，但是仅仅安装这个包是不够的。
具体参考：
[npm.js包pngquant-bin](https://www.npmjs.com/package/pngquant-bin)
[node_modules/pngquant-bin/vendor/pngquant</code> binary doesn’t seem to work correctly](<a href="https://github.com/imagemin/pngquant-bin/issues/78" target="_blank" rel="noopener">https://github.com/imagemin/pngquant-bin/issues/78</a>)<br><a href="https://blog.csdn.net/zgrbsbf/article/details/81911999" target="_blank" rel="noopener">pngquant failed to build, make sure that libpng-dev is installed</a></p>
<p>解决方案：<br>运行以下命令<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo apt-get install libpng-dev</span><br><span class="line">sudo npm install -g pngquant-bin</span><br></pre></td></tr></table></figure></p>
<p>一般而言以上命令就可以解决了，但是有时候pngquant-bin安装报错，就尝试一下命令：<br><code>sudo apt-get install -y build-essential libpng-dev</code><br>如过还失败，再尝试：<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo apt-get update </span><br><span class="line">sudo apt-get install libtiff5-dev libtiff5 libjbig-dev</span><br></pre></td></tr></table></figure></p>
]]></content>
      <categories>
        <category>hexo博客系列</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>2018年终总结</title>
    <url>/2019/01/01/2018%E5%B9%B4%E7%BB%88%E6%80%BB%E7%BB%93/</url>
    <content><![CDATA[<p>不知不觉中2018年已经走向尾声，2019年悄然来临。这一年对我个人而言是崎岖坎坷的一年，我的人生最大的转折点或许就在这一年了。其中发生了太多太多的事，有的或许已经在计划中，但是可能不知不觉中脱离掌控，有的或许原本的就在计划外，打乱了原来的计划，但是无论如何，这一年还是顺利的度过了，我也算是顺利的找到一份正式的前端工作，总算是步入了这一行，这其中的冷暖唯有自己知道吧。</p>
<h2 id="2018回顾"><a href="#2018回顾" class="headerlink" title="2018回顾"></a>2018回顾</h2><p>还记得年初的时候，我就开始在思考，我的未来究竟应该在哪里。或者说，我应该做什么的一件事，才能让我能觉得不枉此生，基于这种情况，我思考了几个问题。</p>
<h3 id="我现在在做什么？"><a href="#我现在在做什么？" class="headerlink" title="我现在在做什么？"></a>我现在在做什么？</h3><p>当时的我，刚毕业半年，在中国华西中山海雅项目，前三个月现场当施工员，然后进入项目技术组当技术员，负责项目技术工作，基本是画图与方案编制。</p>
<h3 id="对于现状"><a href="#对于现状" class="headerlink" title="对于现状"></a>对于现状</h3><p>在现场时，由于是在基础阶段很忙，白天每天跟钢筋混凝土、脚手架等打交道，偶尔晚上通宵加班值班。不忙的时候，一般在看图纸，偶尔看看现场规范。有时候会去附近的超市逛逛，或者看场电影，活动范围基本在项目部3km之内。时间、距离严重受控，与外界接触交流不多，工作生活都很封闭。<br><a id="more"></a></p>
<h3 id="我会干什么？"><a href="#我会干什么？" class="headerlink" title="我会干什么？"></a>我会干什么？</h3><p>关于这个问题我其实并没有多的思考，因为我刚毕业，我的选择可以有很多，重要的是我都能学，对于学习，反正我就没怂过。</p>
<h3 id="我该干什么？"><a href="#我该干什么？" class="headerlink" title="我该干什么？"></a>我该干什么？</h3><p>对于这个问题，我思考了很久。我当初是想找一份有关技术的工作，有关互联网的工作。于是脑子里浮出大概两个方向，当程序员，产品经理。在了解多方面的工作后，最终性格使然，我还是决定当个程序员，毕竟我内心还有着技术驱动世界改变的想法。</p>
<h3 id="条件？自学？培训机构？"><a href="#条件？自学？培训机构？" class="headerlink" title="条件？自学？培训机构？"></a>条件？自学？培训机构？</h3><p>方向决定了，就该准备计划转行了。我的条件：本科，土木工程专业，刚毕业半年。这三点无论怎么看都只会拖后腿，但是这很重要么（who care？）。最初原本计划是去线下参加培训的，试听了一周，发现并不适合我，说起原因，觉得他们都是被动学习，我并不喜欢这样，我喜欢主动学习，像那种你告诉我在哪里，该怎么去思考找到解决问题的方式方法，我自己来。就这样，一周后回到家开始了漫长的自学之旅。然而，自学之路，最难的在于你不知道你到底是否学会了，学以致用，这个条件很难，即使有很厉害的同学远程指导（但毕竟条件有限），最后还是报了个线上班跟班学习（主要还是以自学为主）。</p>
<h3 id="反思"><a href="#反思" class="headerlink" title="反思"></a>反思</h3><p>从4月底开始到11月中旬，为期6个月的前端学习之旅，前2个月的迷茫自学，后四个月的加速学习，中间磕磕碰碰的，迷茫过，也曾煎熬痛苦过，不过那些都是过去时态了。虽说最后还是找到了一个不差的工作，但是对于个人而言，整个学习找工作的过程中，暴露出了许许多多的问题，导致最后的工作不如人意。</p>
<ol>
<li>自律性很差<br> 自学两个月，痛苦迷茫的很大一部分原因，一个人没法做到自以为的自律，导致的学习效率地下，知识转化率很低。</li>
<li>学习方式的问题<br> 其实关于这个问题，我一直就有在怀疑我的学习方式其实效率没那么高，还是主要在于个人学习习惯问题。对于学习，输入与输出是两个非常重要的方式，从某总程度上说输出也决定了输入的多少，我对于这个理解为知识的转化率。通过这几个月的学习，我发现，第一：其实我看的文章很多，了解的东西很多，但是都很浅。实际上有些知识我确实没有深入了解，其中一个重要原因就是，我总想着按部就班，放着以后再深入了解，最终的结果是，那些文章知识点，我到最后都没有认真去实践过，这样很不好。第二：我深入学习的过程中，并没有彻底弄懂其中的每一个知识点，不懂的就会自动虐过，总想着后面会看懂的。这存在一定的道理，但是并不是每本书都是这样的，很多时候前面没看懂或者说没记下来，后面自然没看懂，会导致学习效率低下，最后掌握的知识很有限。</li>
<li>个人性格：拖延症、忧郁症。<br> 很早就发现了有拖延症，犹豫症的毛病，自己一直觉得不是什么大毛病。可经过这几个月的学习发现，这问题的存在直接影响到工作生活。</li>
</ol>
<h2 id="2018总结及2019展望"><a href="#2018总结及2019展望" class="headerlink" title="2018总结及2019展望"></a>2018总结及2019展望</h2><p>过去一年里经历了许多，改变了许多，无论前路如何，我至少不会后悔这年所做的一切决定。但是在一些个人问题上我要做出深刻反思，算是立一些flag吧：</p>
<ol>
<li><p>做到自律<br> 开始坚持健身<br> 协调工作与个人学习之间的时间冲突</p>
</li>
<li><p>克服拖延症及犹豫症<br> 今日事今日毕，拒绝拖到第二天，无论如何都得完成。<br> 养成执行力，说到做到，制定相应的奖惩机制。</p>
</li>
<li><p>学习方式的改变<br> 弄清楚每一个知识点，不懂的地方绝不略过。至少拿笔记本记下来，不能拖过当天！<br> 高效学习方式的处理：视屏（书） —  笔记本（做笔记） —  博客<br> 在掘金、知乎上发表有技术含量的文章，获得更多的浏览量与赞</p>
</li>
<li><p>制定每周学习计划<br> 制定周学习目标、月学习目标，争取每周解决一个知识点。</p>
</li>
<li><p>完善个人大前端技能框架</p>
<ul>
<li>JS高级深入了解（vue源码，Jquer源码解析）</li>
<li>React框架学习</li>
<li>Typescript 学习</li>
<li>Flutter 学习，争取做出一个项目（不包括demo项目）</li>
<li>升级原有项目，无论什么时候都有稍微拿的出手的项目</li>
<li>完善掌握网络协议、算法相关知识</li>
<li>设常用设计模式的掌握</li>
</ul>
</li>
<li><p>加强英语学习能力<br> 最终能独立浏览相关英文文档（npm上包的使用）<br> 翻译几篇国外技术含量高的文章</p>
</li>
</ol>
]]></content>
      <categories>
        <category>总结</category>
        <category>年终总结</category>
      </categories>
      <tags>
        <tag>总结</tag>
      </tags>
  </entry>
  <entry>
    <title>vscode 快捷操作</title>
    <url>/2018/12/18/vscode-%E5%BF%AB%E6%8D%B7%E6%93%8D%E4%BD%9C/</url>
    <content><![CDATA[<h2 id="命令行使用vs-code"><a href="#命令行使用vs-code" class="headerlink" title="命令行使用vs code"></a>命令行使用vs code</h2><p>命令查找：<code>Ctrl + Shift + P</code>/<code>Cmd + Shift + P</code></p>
<p><code>code + &lt;filename&gt;/&lt;filepath&gt;</code> 打开文件或者文件目录</p>
<table>
<thead>
<tr>
<th style="text-align:center">参数</th>
<th style="text-align:center">作用</th>
<th style="text-align:center">注意事项</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">-r</td>
<td style="text-align:center">在同一窗口打开</td>
<td style="text-align:center">会删掉原有工作区，只保留一个</td>
</tr>
<tr>
<td style="text-align:center">-g &lt; file:line[character] &gt;</td>
<td style="text-align:center">打开文件，自动跳转到文件中某个特定的行与列</td>
<td style="text-align:center">无</td>
</tr>
<tr>
<td style="text-align:center">-d &lt; path1 &gt; &lt; path2 &gt;</td>
<td style="text-align:center">用来比较两个文件的内容，传入两个文件路径</td>
<td style="text-align:center">无</td>
</tr>
</tbody>
</table>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">code -r -g package.json:128 // 表示打开package.json文件，自动跳转到128</span><br><span class="line"></span><br><span class="line">code -r -d a.txt b.txt // 比较a.txt 与b.txt 文件的内容</span><br><span class="line"></span><br><span class="line">ls | code // 把当前目录下的所有文件名都展示在编辑器里</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<h2 id="双手不离键盘"><a href="#双手不离键盘" class="headerlink" title="双手不离键盘"></a>双手不离键盘</h2><h3 id="光标的移动"><a href="#光标的移动" class="headerlink" title="光标的移动"></a>光标的移动</h3><table>
<thead>
<tr>
<th style="text-align:center">windows</th>
<th style="text-align:center">mac/linux</th>
<th style="text-align:center">作用</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">Ctrl + 左右方向键</td>
<td style="text-align:center">Opiton + 左右方向键</td>
<td style="text-align:center">移动一个单词的距离</td>
</tr>
<tr>
<td style="text-align:center">home/end</td>
<td style="text-align:center">cmd + 左右方向键</td>
<td style="text-align:center">移动到行首或行尾</td>
</tr>
<tr>
<td style="text-align:center">Ctrl + M</td>
<td style="text-align:center">Cmd + shift + \</td>
<td style="text-align:center">代码块的光标移动（光标在中括号上的跳转）</td>
</tr>
<tr>
<td style="text-align:center">Ctrl + Home/End</td>
<td style="text-align:center">Cmd + Home/End</td>
<td style="text-align:center">移动到文档的第一行、最后一行</td>
</tr>
</tbody>
</table>
<h3 id="文本选择"><a href="#文本选择" class="headerlink" title="文本选择"></a>文本选择</h3><p>基于光标移动的操作基础上 多一个 shift 键就可以在移动的同时选择文本</p>
<blockquote>
<p>注意：<br><code>ctrle + 上下方向键</code> 上下移动移动整行</p>
</blockquote>
<h3 id="删除操作"><a href="#删除操作" class="headerlink" title="删除操作"></a>删除操作</h3><p>常用操作：选中文本，然后删除！</p>
<table>
<thead>
<tr>
<th style="text-align:center">windows</th>
<th style="text-align:center">mac/linux</th>
<th style="text-align:center">作用</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center"></td>
<td style="text-align:center">fn + delete</td>
<td style="text-align:center">删除该行右侧所有内容</td>
</tr>
<tr>
<td style="text-align:center"></td>
<td style="text-align:center">Cmd + Delete</td>
<td style="text-align:center">删除该行左侧所有内容</td>
</tr>
<tr>
<td style="text-align:center">Ctrl + Delete</td>
<td style="text-align:center">fn + Delete</td>
<td style="text-align:center">删除字符右侧的内容</td>
</tr>
<tr>
<td style="text-align:center">Ctrl + 删除键</td>
<td style="text-align:center">fn + 删除键</td>
<td style="text-align:center">删除字符左侧的内容</td>
</tr>
</tbody>
</table>
<h2 id="自定义快捷键"><a href="#自定义快捷键" class="headerlink" title="自定义快捷键"></a>自定义快捷键</h2><p>查找vscode默认快捷键方式： <code>Ctrl + Shift + P</code>查找键盘快捷方式</p>
]]></content>
      <categories>
        <category>工具</category>
        <category>vscode</category>
      </categories>
      <tags>
        <tag>vscode</tag>
      </tags>
  </entry>
  <entry>
    <title>半年计划</title>
    <url>/2018/11/25/futrue-plan/</url>
    <content><![CDATA[<p>入职新公司大概有一周左右了，也逐渐适应了新公司的工作与周围的环境。在工作之余也该好好计划下自己的学习与技术增长了。给自己定个半年的目标，主要分在两个方面：</p>
<ul>
<li>工作 —- 经验增长，团队合作交流，前后端工作交流</li>
<li>生活 —- 学习能力的增长。</li>
</ul>
<h2 id="工作"><a href="#工作" class="headerlink" title="工作"></a>工作</h2><p>公司目前主要技术栈以 vue + element UI 为主，后端是 Java ，前端由于之前旧的项目前后端未分离，涉及到 express 框架。公司目前的几个项目：</p>
<ul>
<li>PC端 pos ，之前的老项目，技术栈混乱，前后端未分离，涉及到 express、vue、jquery等复杂且落后的技术。<br>目前 pos 端计划用 vue + element UI 重构 pos 端，主要以现成的 vue-element-admin UI框架为主，实现重构。</li>
<li>移动端微商城，已经开发完成，主要运用有赞前端团队出的UI框架与vue技术，后期主要以维护为主，可以多看源码，了解学习其中的业务需求实现，做到能解决所有 bug 及新增的需求完成。</li>
<li>App端，导购App，之前的项目问题太多，直接推翻重做，由前端开发，主要利用基于 vue 开发三端的 weex 技术，实现 Android 与 ios app 的开发。</li>
</ul>
<p>目前我主要负责的是公司的新项目开发，基于此种现状，目前主要精力应放在以下几点：<br><a id="more"></a></p>
<ol>
<li>增加 vue 熟练度，对 vue 在开发工作的每一个流程熟稔于心，深入了解实现vue-router、vuex 等在实际工作的运用，甚至搞熟 vue 服务器端的渲染以及 ssr 等必知概念。</li>
<li>基于 vue ，开始了解 Android 开发及 ios 开发，完成基本工作的同时，能独立实现一个网易云音乐App，或者一个笔记便签类的App。</li>
<li>深入学习理解 vue-element-admin，这个中后台UI框架的实现原理，并详细学习记录其基本业务需求，以及实际工作中的业务完善，争取利用其原理与基本模板，实现一个博客管理系统，或者一个组件展示页面（类似与Vuepress）</li>
<li>由于公司之前的项目前后端未分离，技术栈混乱，因此是一个学习写文档，建立代码规范，学习团队合作的好机会，要做好每次学习的记录。</li>
</ol>
<h2 id="个人学习"><a href="#个人学习" class="headerlink" title="个人学习"></a>个人学习</h2><p>基于公司的工作情况，个人未来技术的期望，做出如下分析：</p>
<ul>
<li>基础：由于非计算机专业，在一些计算机原理及系统方面的知识很薄弱，未来一定要计划加强，但半年内不考虑，第七个月开始计划执行学习。</li>
<li>算法：虽说前端算法要求不高，但是作为个人职业发展，算法很重要。故前期学习巩固基本的算法。</li>
<li>JS：无论前端的框架如何发展变化，前端的核心依然是 JavaScript ，故依然要在JS上花时间精力深入学习。</li>
<li>Html5&amp;&amp;Css3：前端的核心写页面，故做一个好看的页面至关重要，上周在公司做的系统维护升级页面与404页面，对css还不够熟练花的时间有点久，应该多拿些精美页面练习。</li>
<li>网络协议：前端很重要的一部分，网络协议，也是个人薄弱之处，深入学习巩固Http协议的全部知识。</li>
<li>JS框架：对 vue 的运用不够熟练，vue的进阶使用还不够深入了解，要在这方面深入学习。小程序与React要深入学习掌握。</li>
<li>Node：目前以了解为主，半年后深入学习掌握，然后借此机会开始学习TCP/IP协议。</li>
</ul>
<p>由于多方面的原因，业余学习时间可能不充足，做出如下计划安排：</p>
<ol>
<li>JS：日常学习巩固JS基础知识：以红皮书、阮一峰JS标准、ES6为主，巩固学习基本知识。以你不知道的 JavaScript 系列为主，深入学习理解 JS 的基本概念。这些计划在三个月内实现。</li>
<li>网络协议：由于书本不在身边，过年前以“极客时间”上的网络专栏为主学习，不够网上找慕课网HTTP协议视屏观看，注意写——博客——总结！！！（即使费时间，速度慢也要写。）</li>
<li>算法：以极客时间专栏为主：写主要算法的实现原理及JS实现总结博客。</li>
<li>Vue：完成慕课网 vue 去哪儿网实战视屏，借用其资源，争取自己手写整个项目。同时看完 Vue.js 实战书籍，并完成其中的项目，同时将 iView 的一些组件充入自己的 UI 框架项目中。</li>
<li>Html5&amp;&amp;Css3：这块主要以练习为主，看为辅，学习一门 css 预处理语言，就<code>scss</code>了，练习在<code>codepen</code>上或者<code>dribble</code>上找页面实现，同时复习 css 深入浅出课程，平均一个月完成一个大型网站的demo，与此同时将之前在掘金上收藏的有关 css 特效的文章一一实现，并写博客总结。</li>
<li>框架：前期以小程序学习为主，主要看极客时间的小程序专栏，并完成掘金小册的小程序项目。待小程序熟悉后，vue 应该深入了解差不多了，此时开始深入学习 React ,主要以极客时间专栏为主，配合慕课网视屏完成一个大项目。</li>
<li>Node:node 目前不是主要方向，平时想要看了，拿 node 深入浅出，学习，以CMR的方式敲代码学习。</li>
<li>工具类：主要是两个，一个vscode，主要以极客时间专栏为主。其次是webpack，主要以掘金小册为主。目标：个人实现工作效率的提升，会定制开发环境，极大提高个人开发效率，并能指导同事完成前端环境的配置。</li>
<li>博客美化：试着深入了解hexo博客主题的原理，逐渐完善主题的配置，实现个人博客的提升。</li>
</ol>
<p>从上面分析计划看来，个人技术水平还是有限，需要大力提升自身技术水平。由于时间精力有限，没有 Typescript 的学习计划，这半年内可能会有调整，目前先试着考虑。目前的工作来看，可能平时会比较辛苦，但坚持吧，每天坚持多学一点，慢慢积累就会多了。周末尽量多做一些大型的内容，多敲代码，提升自身写代码的能力。</p>
]]></content>
      <tags>
        <tag>总结</tag>
      </tags>
  </entry>
  <entry>
    <title>Event Loop事件循环，GET！</title>
    <url>/2018/10/29/Event-Loop%E4%BA%8B%E4%BB%B6%E5%BE%AA%E7%8E%AF%EF%BC%8CGET%EF%BC%81/</url>
    <content><![CDATA[<p>JS中比较让人头疼的问题之一要算异步事件了，比如我们经常要等后台返回数据后进行dom操作，又比如我们要设置一个定时器完成特定的要求。在这些同步与异步事件里，异步事件肯定是在同步事件之后的，但是异步事件之间又是怎么样的一个顺序呢，比如多个setTimeout事件又是怎么样一个执行顺序？这就涉及到事件循环：Event Loop。</p>
<h2 id="JS的单线程"><a href="#JS的单线程" class="headerlink" title="JS的单线程"></a>JS的单线程</h2><p>虽然现在的JS可以用来做多方面的开发，但是最初的JS是浏览器的专用语言，用来操作DOM。所以从诞生之初，JS就被设计成单线程语言，原因是不想让浏览器变得太复杂，因为多线程需要共享资源、且有可能修改彼此的运行结果，对于一种网页脚本语言来说，这就太复杂了。如果 JavaScript 同时有两个线程，一个线程在网页 DOM 节点上添加内容，另一个线程删除了这个节点，这时浏览器应该以哪个线程为准？是不是还要有锁机制？所以，为了避免复杂性，JavaScript 一开始就是单线程，这已经成了这门语言的核心特征，将来也不会改变。</p>
<p>但是这种单线程机制却制造了另一个麻烦，假如一个操作需花费很长时间，那么此时浏览器就会一直等待这个操作完成，就会造成不好的体验。因此，JS的另一个事件就是异步事件。异步事件是专门将一些事件以队列的形式储存到浏览器的任务队列中，等同步事件执行完后再去执行，这样就避免了页面堵塞。</p>
<p>JavaScript 引擎怎么知道异步任务有没有结果，能不能进入主线程呢？答案就是引擎在不停地检查，一遍又一遍，只要同步任务执行完了，引擎就会去检查那些挂起来的异步任务，是不是可以进入主线程了。这种循环检查的机制，就叫做事件循环（Event Loop）。</p>
<h2 id="浏览器的事件循环"><a href="#浏览器的事件循环" class="headerlink" title="浏览器的事件循环"></a>浏览器的事件循环</h2><p><img src="https://upload-images.jianshu.io/upload_images/12812641-300cc2c2bc72ad43.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="浏览器事件循环"></p>
<p>如上图所示，js中的基本数据与对象都会储存在栈内存中，其中复杂类型数据对象会在堆内存储存其数据结构，栈内存储存的是对这个数据结构的引用。</p>
<h3 id="执行栈"><a href="#执行栈" class="headerlink" title="执行栈"></a>执行栈</h3><p>javaScript是单线程，也就是说只有一个主线程，主线程有一个栈。当JS代码执行时，代码会被推入执行栈中进行运行，运行代码的过程中，同步事件会立即执行，其中Dom、Ajax以及SetTimeout等异步事件会注册回调函数，放入事件回调队列中，等同步代码执行完之后执行。这样一个循环便是浏览器的Event Loop。</p>
<p><img src="https://upload-images.jianshu.io/upload_images/12812641-ea9bfa93fad8e30e.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="执行过程中栈的变化"></p>
<h3 id="异步过程"><a href="#异步过程" class="headerlink" title="异步过程"></a>异步过程</h3><p>但是在回调队列中这些事件又是怎么样一个执行顺序呢？实际上异步队列存在两个队列，一个宏任务队列，一个微任务队列，其这就涉及到两个概念:</p>
<ul>
<li>宏任务(MacroTask):<br>包括整体代码script，setTimeout、setInterval、setImmediate、I/O、UI渲染</li>
<li>微任务(MicroTask)：<br>Promise、process.nextTick、Object.observe、MutationObserver</li>
</ul>
<p>在栈内存中代码执行完后，浏览器空闲，立即处理回调队列，将回调队列中的宏任务队列中的事件推入执行栈中执行。</p>
<ul>
<li>首先会执行宏任务，如果宏任务中存在宏任务，则会把该任务放到宏任务队列中。如果该任务里存在微任务，则把微任务放在微任务队列。</li>
<li>在这个宏任务执行完后，首先去看微任务队列中是否有任务，然后把微任务推到执行栈中执行。</li>
</ul>
<p>执行完微任务队列，这一次循环就结束了，然后再进行在宏任务队列中进行下一个宏任务，微任务，直至回调队列清空。</p>
<p>上述事件归纳后，以下例说明：<br><img src="https://upload-images.jianshu.io/upload_images/12812641-a70610755236a536.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="代码示例"></p>
<p>分析：</p>
<p>循环1：</p>
<ul>
<li>【task队列：script ；microtask队列：】<br>1.首先整个代码被推到执行栈中执行，这是一个宏任务（整个script代码）<br>2.运行中，同步代码立即执行，new Promise中的fn是立即执行的。setTimeout被放在宏任务队列中，promise1、promise2被放在微任务队列中。</li>
<li>【task队列：setTimeout ；microtask队列：promise1、promise2】<br>3.宏任务script执行完后，执行微任务队列，取出microtask队列，推入执行栈执行，第一次循环到此结束。</li>
</ul>
<p>循环2：</p>
<ul>
<li>【task队列：setTimeout ；microtask队列：】<br>4.取出宏任务中的setTimeout推入执行栈执行，如果有微任务则，则被放在微任务队列（这里没有）。<br>5.宏任务执行完，去微任务队列执行（微任务队列为空）。</li>
<li>【task队列：；microtask队列：】<br>6.宏任务队列为空，循环至此结束。</li>
</ul>
<h2 id="Nodejs-事件循环"><a href="#Nodejs-事件循环" class="headerlink" title="Nodejs 事件循环"></a>Nodejs 事件循环</h2><p>nodejs中的事件循环跟浏览器不一样，浏览器的循环是遵循ES标准里的，nodejs里的循环是通过LIBUV库实现的。</p>
<p>当 Node.js 启动时，会做这几件事</p>
<ul>
<li>初始化 event loop</li>
<li>开始执行脚本（或者进入 REPL，本文不涉及 REPL）。这些脚本有可能会调用一些异步 API、设定计时器或者调用 process.nextTick()</li>
<li>开始处理 event loop</li>
</ul>
<p>nodejs的Event Loop 一共有6个阶段：<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">   ┌───────────────────────┐</span><br><span class="line">┌─&gt;│        timers         │</span><br><span class="line">│  └──────────┬────────────┘</span><br><span class="line">│  ┌──────────┴────────────┐</span><br><span class="line">│  │     I/O callbacks     │</span><br><span class="line">│  └──────────┬────────────┘</span><br><span class="line">│  ┌──────────┴────────────┐</span><br><span class="line">│  │     idle, prepare     │</span><br><span class="line">│  └──────────┬────────────┘      ┌───────────────┐</span><br><span class="line">│  ┌──────────┴────────────┐      │   incoming:   │</span><br><span class="line">│  │         poll          │&lt;─────┤  connections, │</span><br><span class="line">│  └──────────┬────────────┘      │   data, etc.  │</span><br><span class="line">│  ┌──────────┴────────────┐      └───────────────┘</span><br><span class="line">│  │        check          │</span><br><span class="line">│  └──────────┬────────────┘</span><br><span class="line">│  ┌──────────┴────────────┐</span><br><span class="line">└──┤    close callbacks    │</span><br><span class="line">   └───────────────────────┘</span><br></pre></td></tr></table></figure></p>
<p>其中我们主要需要关注的是timers、poll、check阶段：</p>
<ul>
<li>timers 阶段：这个阶段执行 setTimeout 和 setInterval 的回调函数。</li>
<li>I/O callbacks 阶段：不在 timers 阶段、close callbacks 阶段和 check 阶段这三个阶段执行的回调，都由此阶段负责，这几乎包含了所有回调函数。</li>
<li>idle, prepare 阶段（译注：看起来是两个阶段，不过这不重要）：event loop 内部使用的阶段（译注：我们不用关心这个阶段）</li>
<li>poll 阶段：获取新的 I/O 事件。在某些场景下 Node.js 会阻塞在这个阶段。</li>
<li>check 阶段：执行 setImmediate() 的回调函数。</li>
<li>close callbacks 阶段：执行关闭事件的回调函数，如 socket.on(‘close’, fn) 里的 fn。</li>
</ul>
<h3 id="timers阶段"><a href="#timers阶段" class="headerlink" title="timers阶段"></a>timers阶段</h3><p>计时器实际上是在指定多久以后可以执行某个回调函数，而不是指定某个函数的确切执行时间。当指定的时间达到后，计时器的回调函数会尽早被执行。如果操作系统很忙，或者 Node.js 正在执行一个耗时的函数，那么计时器的回调函数就会被推迟执行。</p>
<h3 id="poll-阶段（轮询阶段）"><a href="#poll-阶段（轮询阶段）" class="headerlink" title="poll 阶段（轮询阶段）"></a>poll 阶段（轮询阶段）</h3><p>poll 阶段有两个功能：</p>
<ol>
<li>如果发现计时器的时间到了，就绕回到 timers 阶段执行计时器的回调。</li>
<li>然后再，执行 poll 队列里的回调。</li>
</ol>
<p>当 event loop 进入 poll 阶段，如果发现没有计时器，就会：</p>
<ul>
<li>如果 poll 队列不是空的，event loop 就会依次执行队列里的回调函数，直到队列被清空或者到达 poll 阶段的时间上限。</li>
<li>如果 poll 队列是空的，就会：<ol>
<li>如果有 setImmediate() 任务，event loop 就结束 poll 阶段去往 check 阶段。</li>
<li>如果没有 setImmediate() 任务，event loop 就会等待新的回调函数进入 poll 队列，并立即执行它。</li>
</ol>
</li>
</ul>
<p>一旦 poll 队列为空，event loop 就会检查计时器有没有到期，如果有计时器到期了，event loop 就会回到 timers 阶段执行计时器的回调。</p>
<h3 id="check-阶段"><a href="#check-阶段" class="headerlink" title="check 阶段"></a>check 阶段</h3><p>这个阶段允许开发者在 poll 阶段结束后立即执行一些函数。如果 poll 阶段空闲了，同时存在 setImmediate() 任务，event loop 就会进入 check 阶段，执行setImmediate() 回调。</p>
<h3 id="Event-Loop-大体流程"><a href="#Event-Loop-大体流程" class="headerlink" title="Event Loop 大体流程"></a>Event Loop 大体流程</h3><p>每一个阶段都有一个队列，我们只关注 timers、poll、check阶段来分析一下，我们在用命令行运行 node server.js 命令时，发生了什么：<br>1、Node.js启动，初始化 Event Loop<br>2、运行server.js脚本内容<br>3、开始运行Event Loop<br>4、timers阶段看脚本里是否设置定时器setTimeout，比如一个4ms延迟与一个100ms延迟的定时器，把它放到timers队列中，进入下一步，I/O callbacks 阶段，idle, prepare 阶段，这两个阶段都不会停留。<br>5、进入poll（轮询）阶段，首先它会查看定时器时间是否到了，比如4ms到了，他就进入下一阶段check阶段、close callbacks 阶段，然后回到timers阶段执行设置的4ms回调函数，接着继续第4步到第5步。4ms没到，则停留在这一阶段，处理poll队列里的任务，直到4ms到、100ms到，然后循环回到timers阶段执行回调。</p>
<p>这里有一个问题：当poll阶段在处理任务1时，比如这个任务1要花费100ms，在这100ms期间，setTimeout定时器到了，则它的回调会等poll处理玩任务1后立即循环进入timers阶段执行</p>
<p>6、从poll阶段进入check阶段时，主要是看是否有setImmediate() 任务，如果有则立即执行，然后再进入close callbacks 阶段，进行循环，进入timers阶段。</p>
<h3 id="setImmediate-vs-setTimeout"><a href="#setImmediate-vs-setTimeout" class="headerlink" title="setImmediate() vs setTimeout()"></a>setImmediate() vs setTimeout()</h3><p>setImmediate 和 setTimeout 很相似，但是其回调函数的调用时机却不一样。</p>
<p>setImmediate() 的作用是在当前 poll 阶段结束后调用一个函数。 setTimeout() 的作用是在一段时间后调用一个函数。一般来说 setImmediate 会先于 setTimeout 执行，但是第一次启动的时候不一样，这两者的回调的执行顺序取决于 setTimeout 和 setImmediate 被调用时的环境。<br>例如:<br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">setTimeout(<span class="function"><span class="params">()</span>=&gt;</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'setTiomeout'</span>)</span><br><span class="line">&#125;,<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">setInmediate(<span class="function"><span class="params">()</span>=&gt;</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'setInmediate'</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p>
<p>为什么会发生这种情况呢？因为我们启动node.js时, node会做三件事, 初始化event loop，运行脚本,开始event loop。运行脚本与开始event loop这两件事不是同时执行的，它两中间间隔多少并不清楚，这跟环境性能有关。然后要注意的一点，setTimeout的延迟时间最小为4ms，所以这里的0相当于4。</p>
<ul>
<li>可能两者间隔5ms，当进入timers阶段的时候，node发现，4ms已经过了，立即执行setTimeout定时器回调，然后执行setImmediate。</li>
<li>也可能两者间隔3ms，当进入timers阶段的时候，node发现，4ms还没过，就进入下一阶段，一直到checked，执行setImmediate，然后等到4ms时再执行setTimeout。</li>
</ul>
<h3 id="process-nextTick"><a href="#process-nextTick" class="headerlink" title="process.nextTick()"></a>process.nextTick()</h3><p>从技术上来讲 process.nextTick() 并不是 event loop 的一部分。实际上，event loop 再次进入循环前，会去先执行process.nextTick()。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">setTimeout(<span class="function"><span class="params">()</span>=&gt;</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'setTiomeout'</span>)</span><br><span class="line">&#125;,<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">setInmediate(<span class="function"><span class="params">()</span>=&gt;</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'setInmediate'</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">proces.nextTick(<span class="function"><span class="params">()</span>=&gt;</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'nextTick'</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<p>上述代码中nextTick先于其它两个执行，Vue中有<code>Vue.nextTick()</code>方法就是类似的思想。</p>
<p>注：<br>本篇文章参考：<br><a href="https://juejin.im/post/5ab7677f6fb9a028d56711d0#heading-9" target="_blank" rel="noopener">Event Loop、计时器、nextTick</a><br><a href="https://juejin.im/post/59e85eebf265da430d571f89#heading-2" target="_blank" rel="noopener">这一次，彻底弄懂 JavaScript 执行机制</a><br><a href="https://github.com/aooy/blog/issues/5" target="_blank" rel="noopener">从event loop规范探究javaScript异步及浏览器更新渲染时机</a></p>
]]></content>
      <tags>
        <tag>JS</tag>
      </tags>
  </entry>
  <entry>
    <title>express 入门</title>
    <url>/2018/10/25/express-%E5%85%A5%E9%97%A8/</url>
    <content><![CDATA[<h2 id="什么是Express？"><a href="#什么是Express？" class="headerlink" title="什么是Express？"></a>什么是Express？</h2><p>官网介绍：Express是基于Node.js平台，快速、开放、极简的Web开发框架。<br>个人理解：我们都知道node.js是后端版本的js语言实现，自然Express更加注重的是后端的处理，它的页面是通过数据与模版渲染而成，注重的是逻辑的交互。与其它常见的前端框架不同，像Vue、React等基本思想都是数据驱动视图，我们不必去关注后台是怎么实现的，只注重数据的操作。而Express恰恰相反。</p>
<h2 id="写一个hello-word"><a href="#写一个hello-word" class="headerlink" title="写一个hello word"></a>写一个hello word</h2><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>安装node.js后，在工作目录下运行一下命令</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">//通过 npm init 命令为你的应用创建一个 package.json 文件。</span><br><span class="line">npm init</span><br><span class="line">//安装Express</span><br><span class="line">npm install express --save</span><br></pre></td></tr></table></figure>
<h3 id="hello-word"><a href="#hello-word" class="headerlink" title="hello word"></a>hello word</h3><p>创建一个app.js文件，内容如下<br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>)</span><br><span class="line"><span class="keyword">const</span> app = express()</span><br><span class="line"></span><br><span class="line">app.get(<span class="string">'/'</span>, (req, res) =&gt; res.send(<span class="string">'Hello World!'</span>))</span><br><span class="line"></span><br><span class="line">app.listen(<span class="number">3000</span>, () =&gt; <span class="built_in">console</span>.log(<span class="string">'Example app listening on port 3000!'</span>))</span><br></pre></td></tr></table></figure></p>
<p>然后在在浏览器中打开<a href="http://localhost:3000/，就可以看到网页了，就这么简单。" target="_blank" rel="noopener">http://localhost:3000/，就可以看到网页了，就这么简单。</a></p>
<h2 id="Express-application-generator"><a href="#Express-application-generator" class="headerlink" title="Express application generator"></a>Express application generator</h2><p>Express提供给我们一个可以快速创建一个应用的骨架的应用生成器：express-generator。它可以帮助我们快速建立一个网站基本需要的所有文件。</p>
<h3 id="本地安装"><a href="#本地安装" class="headerlink" title="本地安装"></a>本地安装</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install express-generator</span><br></pre></td></tr></table></figure>
<h3 id="创建应用"><a href="#创建应用" class="headerlink" title="创建应用"></a>创建应用</h3><p>通过命令express -h 可以查看可用的命令参数，其中<code>-f</code>强制在非空目录下创建应用，<code>-v</code>表示view的模版引擎。<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npx express . -f -e</span><br><span class="line"></span><br><span class="line">//安装依赖</span><br><span class="line">npm install</span><br></pre></td></tr></table></figure></p>
<p>表示在强制（-f）在当前目录（.）下创建 view=ejs（ -e 模版引擎） 的应用。根目录下会生成下述文件：</p>
<p><img src="https://upload-images.jianshu.io/upload_images/12812641-540834276a7cfa13.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="目录结构"></p>
<h3 id="基本运行"><a href="#基本运行" class="headerlink" title="基本运行"></a>基本运行</h3><p>运行命令<br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">DEBUG=sticky-note:* npm start</span><br><span class="line"><span class="comment">//或者直接</span></span><br><span class="line">npm start</span><br></pre></td></tr></table></figure></p>
<p>然后在浏览器中打开 <a href="http://localhost:3000/" target="_blank" rel="noopener">http://localhost:3000/</a> 网址就可以看到这个应用了。</p>
<p>我们在package.json文件中可以看到 npm start 是命令 node ./bin/www 的缩写，实际运行了 bin/www 文件，打开 www 文件我们会发现会去运行根目录下的 app.js 文件。<br><img src="https://upload-images.jianshu.io/upload_images/12812641-9979e66d02007b6d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="package.json"></p>
<p>在 app.js 文件中，重要的如下几行代码：</p>
<p><img src="https://upload-images.jianshu.io/upload_images/12812641-a04a0f265b54325f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="app.js"></p>
<p>设置模版引擎与路由跳转，当页面跳转至不同的路由时，运行 router 下对应的文件，获取数据与 view 下的模版结合渲染页面。看看router目录下的index.js文件，响应的同时，通过render函数对数据与模版的结合渲染页面。</p>
<p><img src="https://upload-images.jianshu.io/upload_images/12812641-e06a651cb3ca8dbc.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="index.js"></p>
<h3 id="Express的MVC"><a href="#Express的MVC" class="headerlink" title="Express的MVC"></a>Express的MVC</h3><p>我们仔细观察目录会发现，express具有MVC的思想：</p>
<ul>
<li>routes控制路由的跳转，逻辑行为操作：C</li>
<li>view是页面的模版，视图：V</li>
<li>应该还有一个获取数据的model</li>
</ul>
<p>这样看来，结构与思想上都具备 MVC 的思想。</p>
]]></content>
      <categories>
        <category>node</category>
        <category>express</category>
      </categories>
      <tags>
        <tag>express</tag>
      </tags>
  </entry>
  <entry>
    <title>知识点整理</title>
    <url>/2018/09/16/%E7%9F%A5%E8%AF%86%E7%82%B9%E6%95%B4%E7%90%86/</url>
    <content><![CDATA[<h2 id="套路"><a href="#套路" class="headerlink" title="套路"></a>套路</h2><ol>
<li>举例</li>
<li>将不会的变成会的</li>
<li>侃侃而谈</li>
</ol>
<h2 id="HTML面试"><a href="#HTML面试" class="headerlink" title="HTML面试"></a>HTML面试</h2><ol>
<li>（必考）你是如何理解HTML语义化的？<ul>
<li>举例：段落用p,边栏用aside，主要内容用main标签</li>
<li>最开始是 PHP 后端写 HTML，不会 CSS，于是就用 table 来布局。table 使用展示表格的。严重违反了 HTML 语义化。后来有了专门的写 CSS 的前端，他们会使用 DIV + CSS 布局，主要是用 float 和绝对定位布局。稍微符合了 HTML 语义化。再后来，前端专业化，知道 HTML 的各个标签的用法，于是会使用恰当的标签来展示内容，而不是傻傻的全用 div，会尽量使用 h1、ul、p、main、header 等标签。语义化的好处是已读、有利于SEO等。</li>
<li>对面试官请看我的博客 <a href="https://zhuanlan.zhihu.com/p/32570423" target="_blank" rel="noopener">https://zhuanlan.zhihu.com/p/32570423</a></li>
</ul>
</li>
<li>meta viewport 是做什么的，怎么写？<ul>
<li>代码：<code>&lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1, maximum-scale=1&quot;&gt;</code></li>
<li>控制页面在移动端不要缩小显示。</li>
<li>侃侃而谈：<br>一开始，所有页面都是给PC准备的，乔布斯推出 iPhone 3GS，页面是不适应手机屏幕的，所以乔布斯的工程师想了一个办法，默认把手机模拟成 980px，页面缩小。后来，智能手机普及，这个功能在部分网站不需要了，所以我们就用 meta:vp 让手机不要缩小我的网页。</li>
</ul>
</li>
<li>canvas元素是干什么的？<ul>
<li>项目：<a href="https://real-jacket.github.io/simpleCanvas/" target="_blank" rel="noopener">小小画板</a></li>
<li>记住一些基本的API，查看MDN入门手册。</li>
</ul>
</li>
</ol>
<h2 id="CSS面试"><a href="#CSS面试" class="headerlink" title="CSS面试"></a>CSS面试</h2><ol>
<li>（必考）盒模型<ul>
<li>举例：<br>  conten-box：width == 内容区宽度<br>  border-box：width == 内容区宽度 + padding 宽度 + border 宽度</li>
</ul>
</li>
<li>css reset和normalize.css有什么区别？<ul>
<li>考英文：<ul>
<li>reset重置，之前的样式我不要，a{color:red;}，抛弃默认样式</li>
<li>normalize让所有的浏览器的标签都跟标准规定的默认样式一致，个浏览器上的标签默认样式基本统一。</li>
</ul>
</li>
</ul>
</li>
<li>(必考)如何居中？<ul>
<li>平时总结：<ul>
<li>水平居中：<ul>
<li>内联：父元素上写<code>text-align:center;</code></li>
<li>块级：<code>margin-left:auto;margin-right:auto;</code></li>
</ul>
</li>
<li>垂直居中：<a href="https://jscode.me/t/topic/1936" target="_blank" rel="noopener">七种方式实现垂直居中</a></li>
</ul>
</li>
</ul>
</li>
<li>选择器优先级如何确定？<ol>
<li>选择器越具体，优先级越高。#xxx大于.yyy</li>
<li>同样优先级，写在后面的覆盖前面的。</li>
<li><code>color:red !important;</code>优先级最高</li>
</ol>
</li>
<li>BFC是什么？<ul>
<li>举例<ul>
<li>overflow:hidden 清除浮动。（一般常用.clearfix清楚浮动，不用overflow:hidden;）</li>
<li>overflow:hidden 取消父子合并。<a href="http://jsbin.com/conulod/1/edit?html,css,js,output" target="_blank" rel="noopener">http://jsbin.com/conulod/1/edit?html,css,js,output</a> （解决：给一个padding-top:1px;） </li>
</ul>
</li>
</ul>
</li>
<li>如何清除浮动？<ol>
<li><code>overflow:hidden;</code>（不建议使用）</li>
<li>.clearfix 清楚浮动写在父元素上 <figure class="highlight js"><table><tr><td class="code"><pre><span class="line">.clearfix::after&#123;</span><br><span class="line">    content:<span class="string">''</span>;</span><br><span class="line">    display:block;</span><br><span class="line">    clear:both;</span><br><span class="line">&#125;</span><br><span class="line">.clearfix&#123;</span><br><span class="line">    zoom:<span class="number">1</span>;<span class="comment">/*兼容IE*/</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ol>
</li>
</ol>
<h2 id="JS面试"><a href="#JS面试" class="headerlink" title="JS面试"></a>JS面试</h2><ol>
<li>JS有哪些基本数据类型？<br>string、number、boolean、null、undefined、symbol、object<br>object包含了数组、函数、正则、日期等对象</li>
<li><p>(必考)Promise怎么使用？</p>
<ol>
<li>then<br> <code>$.ajax(...).then(成功函数,失败函数)</code></li>
<li>链式then<br> <code>$.ajax(...).then(成功函数，失败函数).then(成功函数，失败函数)</code></li>
<li>如何自己生成Promise对象 <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">xxx</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve,reject</span>)</span>&#123;</span><br><span class="line">        setTimeout(<span class="function"><span class="params">()</span>=&gt;</span>&#123;</span><br><span class="line">            resolve()或者reject()</span><br><span class="line">        &#125;,<span class="number">3000</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line">xxx().then(...)</span><br></pre></td></tr></table></figure>
</li>
</ol>
</li>
<li><p>（必考）AJAX手写一下？</p>
 <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> xhr = <span class="keyword">new</span> XMLHttpRequest();</span><br><span class="line"></span><br><span class="line">xhr.open(<span class="string">'POST'</span>,<span class="string">'/xxx'</span>)</span><br><span class="line"></span><br><span class="line">xhr.onreadystatechange = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">   <span class="keyword">if</span>(xhr.readyState === <span class="number">4</span>)&#123;</span><br><span class="line">       <span class="keyword">if</span>(xhr.status === <span class="number">200</span>)&#123;</span><br><span class="line">           <span class="built_in">console</span>.log(xhr.response);</span><br><span class="line">       &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">           <span class="built_in">console</span>.log(xhr.status)</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">xhr.onerror = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">   <span class="built_in">console</span>.error(xhr.status)</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">xhr.send(<span class="literal">null</span>);</span><br></pre></td></tr></table></figure>
</li>
<li><p>（必考）闭包是什么？</p>
 <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">   <span class="keyword">var</span> n = <span class="number">0</span>;</span><br><span class="line">   <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">       n += <span class="number">1</span></span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> adder = ()</span><br><span class="line">adder()<span class="comment">// n === 1</span></span><br><span class="line">adder()<span class="comment">// n === 2</span></span><br><span class="line"><span class="built_in">console</span>.log(n)<span class="comment">// n is not defined</span></span><br></pre></td></tr></table></figure>
<p>参考：<a href="https://zhuanlan.zhihu.com/p/22486908" target="_blank" rel="noopener">https://zhuanlan.zhihu.com/p/22486908</a></p>
</li>
<li><p>（必考）这段代码里的this是什么？</p>
<ol>
<li>fn()里面的this就是window</li>
<li>fn()是stric mode，this就是undefined</li>
<li>a.b.c.fn()里面的this就是a.b.c</li>
<li>new F()里面的this就是新生成的实例</li>
<li><code>()=&gt;console.log(this)</code>里面的this跟外面的this的值一模一样</li>
</ol>
<p>参考：<a href="https://zhuanlan.zhihu.com/p/23804247" target="_blank" rel="noopener">https://zhuanlan.zhihu.com/p/23804247</a></p>
</li>
<li><p>（必考）什么是立即执行函数？使用立即执行函数的目的是什么？</p>
 <figure class="highlight js"><table><tr><td class="code"><pre><span class="line">;(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> name</span><br><span class="line">&#125;())</span><br><span class="line"></span><br><span class="line">;(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> name</span><br><span class="line">&#125;)()</span><br><span class="line"></span><br><span class="line">~<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> name</span><br><span class="line">&#125;()</span><br></pre></td></tr></table></figure>
<p> 造出一个作用域，防止污染全局变量<br> ES6：</p>
 <figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="keyword">let</span> name</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>async/await 语法了解吗？目的是什么？</p>
 <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">reutrnPromise</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    reutrn <span class="keyword">new</span> <span class="built_in">Promise</span>( <span class="function"><span class="keyword">function</span>(<span class="params">resolve,reject</span>)</span>&#123;</span><br><span class="line">        setTimeout(<span class="function"><span class="params">()</span>=&gt;</span>&#123;</span><br><span class="line">            resolve(<span class="string">'fuck'</span>)</span><br><span class="line">        &#125;,<span class="number">3000</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line">returnPromise().then(<span class="function">(<span class="params">result</span>)=&gt;</span>&#123;</span><br><span class="line">    result === <span class="string">'fuck'</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> result = <span class="keyword">await</span> reuturnPromise()</span><br><span class="line">result === <span class="string">'fuck'</span></span><br></pre></td></tr></table></figure>
<p> 主要目的：将异步代码写成同步代码。</p>
</li>
<li><p>如何实现深拷贝？</p>
<ol>
<li><p>JSON来深拷贝</p>
 <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a = &#123;...&#125;</span><br><span class="line"><span class="keyword">var</span> b = <span class="built_in">JSON</span>.parse(<span class="built_in">JSON</span>.stringify(a))</span><br></pre></td></tr></table></figure>
<p> 缺点：JSON不支持函数、引用、undefined、RegExp、Date……</p>
</li>
<li><p>递归拷贝</p>
 <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">clone</span>(<span class="params">object</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> object2</span><br><span class="line">    <span class="keyword">if</span>(! (object <span class="keyword">instanceof</span> <span class="built_in">Object</span>) )&#123;</span><br><span class="line">        <span class="keyword">return</span> object</span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(object <span class="keyword">instanceof</span> <span class="built_in">Array</span>)&#123;</span><br><span class="line">        object2 = []</span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(object <span class="keyword">instanceof</span> <span class="built_in">Function</span>)&#123;</span><br><span class="line">        object2 = <span class="built_in">eval</span>(object.toString())</span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(object <span class="keyword">instanceof</span> <span class="built_in">Object</span>)&#123;</span><br><span class="line">        object2 = &#123;&#125;</span><br><span class="line">    &#125;</span><br><span class="line">    你也可以把 <span class="built_in">Array</span> <span class="built_in">Function</span> <span class="built_in">Object</span> 都当做 <span class="built_in">Object</span> 来看待，参考 https:<span class="comment">//juejin.im/post/587dab348d6d810058d87a0a</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> key <span class="keyword">in</span> object)&#123;</span><br><span class="line">    object2[key] = clone(object[key])</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> object2</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>环</p>
</li>
</ol>
</li>
<li><p>如何实现数组去重？</p>
<ol>
<li><p>计数排序的逻辑（只能正整数）</p>
 <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a = [<span class="number">4</span>,<span class="number">2</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]</span><br><span class="line"><span class="keyword">var</span> hashTab = &#123;&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> i=<span class="number">0</span>; i&lt;a.length;i++)&#123;</span><br><span class="line">    <span class="keyword">if</span>(a[i] <span class="keyword">in</span> hashTab)&#123;</span><br><span class="line">        <span class="comment">// 什么也不做</span></span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        hashTab[ a[i] ] = <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//hashTab: &#123;4: true, 2: true, 5: true, 6:true, 3: true&#125;</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.keys(hashTab)) <span class="comment">// ['4','2','5','6','3']</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>Set去重<br> <code>Array.from(new Set(a))</code></p>
</li>
<li>WeakMap 任意类型去重</li>
</ol>
</li>
<li><p>如何用正则实现string.trim()?</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">trim</span>(<span class="params">string</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> string.replace(<span class="regexp">/^\s+|\s+$/g</span>, <span class="string">''</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>JS原型是什么？</p>
<ul>
<li>举例<br>a. var a = [1,2,3]<br>b. 只有0、1、2、length 4个key<br>c. 为什么可以a.push(4),push是哪里来的？<br>d. a.proto === Array.prototype<br>e. push 就是沿着 a.prototype找到的，也就是Array.prototype.push<br>f. Array.prototype还有很多方法，如join、pop、slice、splice<br>g. Array.prototype 就是a的原型(proto)<br>参考：<a href="https://zhuanlan.zhihu.com/p/23090041" target="_blank" rel="noopener">https://zhuanlan.zhihu.com/p/23090041</a></li>
</ul>
</li>
<li>ES6中的class了解吗？<ul>
<li>把MND class章节看完</li>
<li>记住一个例子</li>
</ul>
</li>
<li><p>JS如何实现继承</p>
<ul>
<li><p>原型链</p>
  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Animal</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.body = <span class="string">'肉体'</span></span><br><span class="line">&#125;</span><br><span class="line">Animal.prototype.move = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Human</span>(<span class="params">name</span>)</span>&#123;</span><br><span class="line">    Animal.apply(<span class="keyword">this</span>, <span class="built_in">arguments</span>)</span><br><span class="line">    <span class="keyword">this</span>.name = name</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// Human.prototype.__proto__ = Animal.prototype // 非法</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> f = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;</span><br><span class="line">f.prototype = Animal.prototype</span><br><span class="line">Human.prototype = <span class="keyword">new</span> f()</span><br><span class="line"></span><br><span class="line">Human.prototype.useTools = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> frank = <span class="keyword">new</span> Human()</span><br></pre></td></tr></table></figure>
</li>
<li><p>extends关键字</p>
  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Animal</span></span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>()&#123;</span><br><span class="line">        <span class="keyword">this</span>.body = <span class="string">'肉体'</span></span><br><span class="line">&#125;,</span><br><span class="line">    move()&#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Human</span> <span class="keyword">extends</span> <span class="title">Animal</span></span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>(name)&#123;</span><br><span class="line">        <span class="keyword">super</span>()</span><br><span class="line">        <span class="keyword">this</span>.name = name</span><br><span class="line">    &#125;,</span><br><span class="line">    useTools()&#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> frank = <span class="keyword">new</span> Human()</span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
</ol>
<h2 id="DOM面试"><a href="#DOM面试" class="headerlink" title="DOM面试"></a>DOM面试</h2><ol>
<li>DOM事件模型是什么？<ol>
<li>冒泡</li>
<li>捕获</li>
<li>如果这个元素是被点击的元素，那么捕获不一定在冒泡之前，顺序室友监听顺序决定的。</li>
</ol>
</li>
<li>移动段的触摸事件了解吗？<ol>
<li>touchstart、touchmove、touchend、touchcancel</li>
<li>模拟swipe事件：记录两次touchmove的位置差，如果最后一次在前一次的右边，说明右滑了。</li>
</ol>
</li>
<li>事件委托是什么？有什么好处？<ol>
<li>假设父元素有4个儿子，我不监听4个儿子，而是监听父元素，看触发事件的元素是哪个儿子，这就是事件委托。</li>
<li>可以监听还没有出生的儿子（动态生成的元素）。省监听器。 <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">listen</span>(<span class="params">element, eventType, selector, fn</span>)</span>&#123;</span><br><span class="line">element.addEventListener(eventType, e=&gt;&#123;</span><br><span class="line">    <span class="keyword">if</span>(e.target.matches(selector))&#123;</span><br><span class="line">        fn.call(el, e, el)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line">&#125;<span class="comment">// 有 bug 但是可以应付面试官的事件委托</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">listen</span>(<span class="params">element, eventType, selector, fn</span>) </span>&#123;</span><br><span class="line">element.addEventListener(eventType, e =&gt; &#123;</span><br><span class="line">    <span class="keyword">let</span> el = e.target</span><br><span class="line">    <span class="keyword">while</span> (!el.matches(selector)) &#123;</span><br><span class="line">        <span class="keyword">if</span> (element === el) &#123;</span><br><span class="line">            el = <span class="literal">null</span></span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        &#125;</span><br><span class="line">        el = el.parentNode</span><br><span class="line">    &#125;</span><br><span class="line">    el &amp;&amp; fn.call(el, e, el)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">return</span> element</span><br><span class="line">&#125; <span class="comment">// 工资 12k+ 的前端写的事件委托</span></span><br><span class="line">listen(ul, <span class="string">'click'</span>, <span class="string">'li'</span>, ()=&gt;&#123;&#125;)</span><br><span class="line"></span><br><span class="line">ul&gt;li*<span class="number">5</span>&gt;span</span><br></pre></td></tr></table></figure>
</li>
</ol>
</li>
</ol>
<h2 id="HTTP面试"><a href="#HTTP面试" class="headerlink" title="HTTP面试"></a>HTTP面试</h2><ol>
<li>HTTP 状态码知道哪些？</li>
<li>301 和 302 的区别是什么？<ol>
<li>301 永久重定向，浏览器会记住</li>
<li>302 临时重定向</li>
</ol>
</li>
<li>HTTP 缓存怎么做？<ol>
<li>Cache-Control: max-age=300</li>
<li><a href="http://cdn.com/1.js?v=1" target="_blank" rel="noopener">http://cdn.com/1.js?v=1</a> 避开缓存</li>
</ol>
</li>
<li>Cache-Control 和 Etag 的区别是什么？</li>
<li>Cookie 是什么？Session 是什么？<ul>
<li>Cookie<ul>
<li>HTTP响应通过 Set-Cookie 设置 Cookie</li>
<li>浏览器访问指定域名是必须带上 Cookie 作为 Request Header</li>
<li>Cookie 一般用来记录用户信息</li>
</ul>
</li>
<li>Session<ul>
<li>Session 是服务器端的内存（数据）</li>
<li>Session 一般通过在 Cookie 里记录 SessionID 实现</li>
<li>SessionID 一般是随机数</li>
</ul>
</li>
</ul>
</li>
<li>LocalStorage 和 Cookie 的区别是什么？<ul>
<li>Cookie 会随请求被发到服务器上，而 LocalStorage 不会</li>
<li>Cookie 大小一般4k以下，LocalStorage 一般5Mb 左右</li>
</ul>
</li>
<li>（必考）GET 和 POST 的区别是什么？<ol>
<li>参数。GET 的参数放在 url 的查询参数里，POST 的参数（数据）放在请求消息体里。</li>
<li>安全（扯淡）。GET 没有 POST 安全（都不安全）</li>
<li>GET 的参数（url查询参数）有长度限制，一般是 1024 个字符。POST 的参数（数据）没有长度限制（扯淡，4~10Mb 限制）</li>
<li>包。GET 请求只需要发一个包，POST 请求需要发两个以上包（因为 POST 有消息体）（扯淡，GET 也可以用消息体）<br>5.GET 用来读数据，POST 用来写数据，POST 不幂等（幂等的意思就是不管发多少次请求，结果都一样。）</li>
</ol>
</li>
<li>（必考）怎么跨域？JSONP 是什么？CORS 是什么？postMessage 是什么？<ol>
<li>JSONP<br>2.CORS<br>3.postMessage 看一下 MDN</li>
</ol>
</li>
</ol>
<h2 id="vue面试"><a href="#vue面试" class="headerlink" title="vue面试"></a>vue面试</h2><ol>
<li>（必考）Vue 有哪些生命周期钩子函数？<ul>
<li>看文档：<a href="https://cn.vuejs.org/v2/api/#%E9%80%89%E9%A1%B9-%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F%E9%92%A9%E5%AD%90" target="_blank" rel="noopener">生命周期</a></li>
</ul>
</li>
<li>（必考）Vue 如何实现组件通信？<ol>
<li>父子通信（使用 Prop 传递数据、使用 v-on 绑定自定义事件）</li>
<li>爷孙通信（通过两对父子通信，爷爸之间父子通信，爸儿之间父子通信）</li>
<li><a href="https://cn.vuejs.org/v2/guide/state-management.html" target="_blank" rel="noopener">兄弟通信（new Vue() 作为 eventBus）</a></li>
</ol>
</li>
<li>Vuex 的作用是什么？<ul>
<li>看文档、博客 <a href="https://vuex.vuejs.org/zh-cn/intro.html" target="_blank" rel="noopener">https://vuex.vuejs.org/zh-cn/intro.html</a></li>
</ul>
</li>
<li>VueRouter 路由是什么？<ul>
<li>看文档、博客</li>
</ul>
</li>
<li>Vue 的双向绑定是如何实现的？有什么缺点？<ul>
<li>看文档，<a href="https://cn.vuejs.org/v2/guide/reactivity.html" target="_blank" rel="noopener">深入响应式原理</a></li>
</ul>
</li>
<li>Computed 计算属性的用法？跟 Methods 的区别。<ul>
<li><a href="https://zhuanlan.zhihu.com/p/33778594" target="_blank" rel="noopener">https://zhuanlan.zhihu.com/p/33778594</a></li>
</ul>
</li>
</ol>
<h2 id="算法面试"><a href="#算法面试" class="headerlink" title="算法面试"></a>算法面试</h2><ol>
<li>排序算法（背诵冒泡排序、选择排序、计数排序、快速排序、插入排序、归并排序）</li>
<li>二分查找法</li>
<li>翻转二叉树</li>
</ol>
]]></content>
      <tags>
        <tag>总结</tag>
      </tags>
  </entry>
  <entry>
    <title>JS之数组</title>
    <url>/2018/09/15/JS%E4%B9%8B%E6%95%B0%E7%BB%84/</url>
    <content><![CDATA[<h2 id="Array定义"><a href="#Array定义" class="headerlink" title="Array定义"></a>Array定义</h2><p>数组是按次序排列的一组值，每个值都有一个下标，按顺序从零开始。<br>数组自带一个属性length，表示数组的长度即有多少个值，其数值为最后一个值下标+1。<br>数组是一种特殊的对象，他的键名是按次序排列的一组整数，而他的键值可以是任意值。<br>判断数组方法： Array.isArray()</p>
<h2 id="创建一个数组"><a href="#创建一个数组" class="headerlink" title="创建一个数组"></a>创建一个数组</h2><p>创建数组的方式有两种：</p>
<ul>
<li>使用Array构造函数<br>根据给构造函数传递参数的不同，生成不同的数组<ul>
<li>传递一个数值，创建一个给定数量的数组<br><code>var colors = new Array(3)</code>创建一个包含3项的数组</li>
<li>传递其它类型的参数，创建一个包含该参数的一个数组<br><code>var names = new Array(&#39;blue&#39;)</code>创建一个包含blue字符串的数组</li>
</ul>
</li>
<li>使用数组字面量表示法</li>
</ul>
<h2 id="数组的增删查改"><a href="#数组的增删查改" class="headerlink" title="数组的增删查改"></a>数组的增删查改</h2><h3 id="数组的增删"><a href="#数组的增删" class="headerlink" title="数组的增删"></a>数组的增删</h3><ol>
<li>length属性：<br>可以通过设置数组的length属性，从数组的末尾移除项或向数组中添加新项。</li>
<li>栈方法：<br>模仿栈数据结构的方法，后进先出。<br>push与pop方法都改变了原数组，只是返回值不同，push返回改变后数组的长度length，而pop返回数组移除的最后一项。<ul>
<li><code>push()</code><br>接受任意数量的参数，将它们逐个添加到数组的末尾，并返回修改的的数组的长度（length）</li>
<li><code>pop()</code><br>从数组末尾移除最后一项，减少数组的length值，并返回移除的项</li>
</ul>
</li>
<li>队列方法：<br>模仿队列数据结构的方法，先进先出。<br>shift与push方法可以实现队列那样的行为<ul>
<li><code>shift()</code><br>移除数组的第一项，减少数组的length值，并返回移除的项</li>
<li><code>unshift()</code>同shift相反，与push类似<br>接受任意数量的参数，将他们逐个添加到数组的开头，并返回数修改后的数组的长度</li>
</ul>
</li>
</ol>
<h3 id="数组的查改"><a href="#数组的查改" class="headerlink" title="数组的查改"></a>数组的查改</h3><ol>
<li><p>获取数组中元素的位置：返回的是索引<br>接受两个参数，要查找的项和表示查找起点位置的索引，第二个参数可选，默认为0。返回要查找的项在数组中的位置（索引），如果没找到返回-1。<br>查找比较每一项时，会使用全等操作符（===）</p>
<ul>
<li><code>indexOf()</code>从开头向末尾查找</li>
<li><code>lastIndexOf()</code>从末尾向开头查找<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> numbers = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">5</span>,<span class="number">4</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">1</span>]</span><br><span class="line"><span class="built_in">console</span>.log(numbers.indexOf(<span class="number">4</span>))  <span class="comment">// 3</span></span><br><span class="line"><span class="built_in">console</span>.log(numbers.lastIndexOf(<span class="number">4</span>))  <span class="comment">// 7</span></span><br><span class="line"><span class="built_in">console</span>.log(numbers.indexOf(<span class="number">4</span>,<span class="number">4</span>))  <span class="comment">// 7</span></span><br><span class="line"><span class="built_in">console</span>.log(numbers.lastIndexOf(<span class="number">4</span>,<span class="number">4</span>))  <span class="comment">// 3</span></span><br><span class="line"><span class="built_in">console</span>.log(numbers.lastIndexOf(<span class="number">4</span>,<span class="number">3</span>))  <span class="comment">// 3</span></span><br><span class="line"><span class="built_in">console</span>.log(numbers.lastIndexOf(<span class="number">4</span>,<span class="number">2</span>))  <span class="comment">// -1</span></span><br><span class="line"><span class="built_in">console</span>.log(numbers.lastIndexOf(<span class="number">0</span>))  <span class="comment">// -1</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>数组的拼接：</p>
<ul>
<li><p><code>concat()</code>方法：基于当前数组的所有项创建一个新的数组。<br>将传入的值，添加到该数组中，并返回一个新的数组。如果传入的是一个或多个数组，则将传入的数组中的每一项添加到该数组中。如果不是数组，则会被简单的添加到数组的末尾。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> colors = [<span class="string">"red"</span>,<span class="string">"green"</span>,<span class="string">"blue"</span>]</span><br><span class="line"><span class="keyword">var</span> colors2 = colors.concat(<span class="string">"yellow"</span>,[<span class="string">"blcak"</span>,<span class="string">"grey"</span>])</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(colors2) <span class="comment">// ["red","green","blue","yellow","blcak","grey"]</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><code>join()</code>方法：以指定参数作为分隔符，将所有数组成员连接为一个字符串返回。如果不提供参数，默认用逗号分隔。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>];</span><br><span class="line"></span><br><span class="line">a.join(<span class="string">' '</span>) <span class="comment">// '1 2 3 4'</span></span><br><span class="line">a.join(<span class="string">' | '</span>) <span class="comment">// "1 | 2 | 3 | 4"</span></span><br><span class="line">a.join() <span class="comment">// "1,2,3,4"</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>数组的截取：<br><code>slice()</code>方法：基于当前数组中的一个或多个项创建一个新数组。<br>接受2个参数，即要返回数的起始位置和结束位置（不包括）。可以省略第二个参数，默认返回从起始位置到末尾的数组。该方法返回的是一个新数组，并不会影响原数组。</p>
</li>
<li>数组的<code>splice()</code>方法<br>splice方法接受三个参数：要删除第一项的位置，删除的项数，要插入的项（可以是多个）。<br>最终返回一个包含删除项的数组，如果没有（第二个参数为0），则返回空数组。<br>根据三个参数的不同，可以实现三种功能：<ul>
<li>删除：<code>splice(0,2)</code>删除数组的前两项</li>
<li>插入：<code>splice(2,0,&quot;red&quot;,&quot;blue&quot;)</code>会从当前数组位置2开始插入字符串</li>
<li>替换：<code>splice(2,1,&quot;red&quot;,&quot;blue&quot;)</code>会删除掉2位置的项，然后从位置2开始插入字符串</li>
</ul>
</li>
</ol>
<h2 id="数组的迭代"><a href="#数组的迭代" class="headerlink" title="数组的迭代"></a>数组的迭代</h2><p>每一个方法接受两个参数：</p>
<ul>
<li>每一项运行的函数：该函数接受三个参数：<ul>
<li>数组的每一项（item）</li>
<li>该项在数组中的位置（index）（可省略）</li>
<li>数组对象本身（Array）（可省略）</li>
</ul>
</li>
<li>运行该函数的作用域对象：影响this的值。</li>
</ul>
<p><code>every()</code>:对数组的每一项运行给定函数，当每一项都返回true时，every()返回true。<br><code>some()</code>:对数组的每一项裕兴给定函数，当其中任一项返回true，some()返回true。<br><code>filter()</code>:对数组的每一项运行给定函数，数组中返回true的项，组成一个新数组返回。<br><code>map()</code>:对数组的每一项运行给定函数，返回对每一项函数运行的结果(返回的值)组成的新数组。<br><code>forEach()</code>:对数组的每一项运行给定函数，无返回值。</p>
<blockquote>
<p>注意：<br>前面四中方法都是返回一个新的值，并没有改变原数组，而forEach操作了原数组<br>forEach本质与for in 循环类似，forEach方法无法中断执行，总是会将所有成员遍历完。如果希望符合某种条件时，就中断遍历，要使用for循环。</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> numbers = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span>  everyN = numbers.every(<span class="function">(<span class="params">item</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> item &gt; <span class="number">0</span></span><br><span class="line">&#125;)</span><br><span class="line">everyN <span class="comment">// true</span></span><br><span class="line"><span class="keyword">var</span> someN = numbers.some(<span class="function">(<span class="params">item</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> item%<span class="number">2</span> === <span class="number">0</span></span><br><span class="line">&#125;)</span><br><span class="line">someN <span class="comment">// true</span></span><br><span class="line"><span class="keyword">var</span> filterN = numbers.filter(<span class="function">(<span class="params">item</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> item%<span class="number">2</span> === <span class="number">0</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">//</span></span><br><span class="line">filterN <span class="comment">//[2,4,6,8]</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> mapN = numbers.map( <span class="function">(<span class="params">item</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> item*<span class="number">2</span></span><br><span class="line">&#125;)</span><br><span class="line">mapN <span class="comment">// [2,4,6,8,10,12,14,16,18]</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> forEachN = numbers.forEach( <span class="function">(<span class="params">item</span>) =&gt;</span> &#123;</span><br><span class="line">    item = item + <span class="number">2</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<h2 id="数组的归并"><a href="#数组的归并" class="headerlink" title="数组的归并"></a>数组的归并</h2><p>接受两个参数：</p>
<ol>
<li><p>每一项上调用的函数<br>这个函数接受4个参数：</p>
<ul>
<li>前一个值</li>
<li>当前值</li>
<li>项的索引</li>
<li>数组对象</li>
</ul>
</li>
<li><p>作为归并基础的初始值</p>
</li>
</ol>
<p>函数返回的值都会作为初始值传给下一项，即数组的第一项调用函数的返回值会作为数组第二项调用函数的初始值参数。<br>迭代(遍历)数组的所有项，返回最终值。</p>
<ul>
<li><code>reduce()</code>: 从第一项开始遍历数组</li>
<li><code>reduceRight()</code>：从最后一项向第一项遍历数组</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> values = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]</span><br><span class="line"></span><br><span class="line">values.reduce( <span class="function">(<span class="params">prev,cur,index,array</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> prev + cur</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// ((((1+2)+3)+4)+5) == 15</span></span><br></pre></td></tr></table></figure>
<h2 id="数组的排序"><a href="#数组的排序" class="headerlink" title="数组的排序"></a>数组的排序</h2><ul>
<li><p>sort()<br>sort()方法会先调用数组每一项的tostring()方法，然后比较得到的字符串，确定如何排序，所以实际排序的是每一项的unicode编码顺序。<br>改进：接受一个比较函数。<br>如果第一个参数应该位于第二个参数前则返回一个负数，如果两个参数相等则返回0，如果第一个参数应该位于第二个参数之后则返回一个正数。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">compare</span>(<span class="params">val1,val2</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(val &lt; val2)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span></span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(val1 &gt; val2) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">    &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;z    </span><br><span class="line"></span><br><span class="line"><span class="comment">//上述代码优化</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">compare</span>(<span class="params">val1,val2</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> val1 -val2</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//从小到大</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> values = [<span class="number">0</span>,<span class="number">5</span>,<span class="number">8</span>,<span class="number">7</span>,<span class="number">10</span>]</span><br><span class="line"></span><br><span class="line">values.sort(compare)</span><br><span class="line"></span><br><span class="line">values <span class="comment">// [0,5,7,8,10]</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>reverse()<br>reverse()反转数组项的顺序</p>
</li>
</ul>
<h2 id="数组的去重"><a href="#数组的去重" class="headerlink" title="数组的去重"></a>数组的去重</h2><ul>
<li>计数排序逻辑：（只能正整数）<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a = [<span class="number">4</span>,<span class="number">2</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">removeSame</span>(<span class="params">array</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> hashTab = &#123;&#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i=<span class="number">0</span>; i&lt;a.length;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(a[i] <span class="keyword">in</span> hashTab)&#123;</span><br><span class="line">            <span class="comment">// 什么也不做</span></span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            hashTab[ a[i] ] = <span class="literal">true</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//hashTab: &#123;4: true, 2: true, 5: true, 6:true, 3: true&#125;</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Object</span>.keys(hashTab)<span class="comment">// ['4','2','5','6','3']</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
]]></content>
      <tags>
        <tag>JS</tag>
      </tags>
  </entry>
  <entry>
    <title>初识脚本</title>
    <url>/2018/09/04/%E4%BB%80%E4%B9%88%E6%98%AF%E8%84%9A%E6%9C%AC/</url>
    <content><![CDATA[<h2 id="什么是脚本"><a href="#什么是脚本" class="headerlink" title="什么是脚本"></a>什么是脚本</h2><p>类似于话剧中的剧本，脚本是计算机的“剧本”，脚本即给计算机一行一行执行的文本。<br>用不同的语言写脚本，有不同的语法。bash脚本有bash脚本语法，JS脚本有其语法，只是JS脚本使用JavaScript语言写的。</p>
<h2 id="用bash写脚本"><a href="#用bash写脚本" class="headerlink" title="用bash写脚本"></a>用bash写脚本</h2><h3 id="创建脚本"><a href="#创建脚本" class="headerlink" title="创建脚本"></a>创建脚本</h3><ol>
<li>新建脚本<ul>
<li>找个地方新建目录<code>mkdir ～/local</code></li>
<li>进入目录<code>cd ~/local</code></li>
<li>创建脚本<code>touch demo.txt</code>（文件后缀无所谓的）</li>
</ul>
</li>
<li><p>编辑脚本内容如下:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">pwd</span> <span class="comment"># 确认一下当前路径是不是 ~/local 或者 /c/Users/你的名字/local</span></span><br><span class="line">mkdir demo</span><br><span class="line"><span class="built_in">cd</span> demo</span><br><span class="line">mkdir css js</span><br><span class="line">touch index.html css/style.css js/main.js</span><br><span class="line"><span class="built_in">exit</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>在任意位置执行<code>sh ~/local/demo.txt</code>即可运行此脚本。</p>
<ul>
<li><code>cd ~/Desktop</code></li>
<li><code>sh ~/local/demo.txt</code></li>
<li>在当前目录里会多出一个demo目录，demo目录里会有一些文件</li>
</ul>
</li>
</ol>
<h3 id="设置PATH"><a href="#设置PATH" class="headerlink" title="设置PATH"></a>设置PATH</h3><ol>
<li><code>cd ~/local;pwd</code>得到<code>local</code>的绝对路径</li>
<li>临时设置PATH<br> a. 运行<code>export PATH=&quot;loacal的绝对路径：$PATH&quot;</code>,这句话是把local目录加到PATH里<br> b. 这时只需要运行<code>demo.txt</code>就相当于运行<code>sh ~/local/demo.txt</code></li>
<li>永久设置PATH，上面的 PATH 在你重启 Bash 之后就会失效，如果你希望 PATH 一直生效，看下面：<br> a. 创建～/.bashrc:<code>touch ~/.bashrc</code><br> b. 编辑～/.bashrc:<code>start ~/.bashrc</code><br> c. 在编辑器里添加一行：<code>export PATH=&quot;loacal的绝对路径：$PATH&quot;</code><br> d. <code>source ~/.bashrc</code><br> e. 现在只需要运行demo.txt即可</li>
</ol>
<h3 id="升级脚本"><a href="#升级脚本" class="headerlink" title="升级脚本"></a>升级脚本</h3><ol>
<li><p>升级脚本，让目录名可变：<br><code>$1</code>表示命令的第一个参数<br><code>-d $1</code>判断目录是否存在</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> [ -d <span class="variable">$1</span> ]; <span class="keyword">then</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">'error: dir exists'</span></span><br><span class="line"><span class="built_in">exit</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">mkdir <span class="variable">$1</span></span><br><span class="line"><span class="built_in">cd</span> <span class="variable">$1</span></span><br><span class="line">mkdir css js</span><br><span class="line">touch index.html css/style.css js/main.js</span><br><span class="line"><span class="built_in">echo</span> <span class="string">'success'</span></span><br><span class="line"><span class="built_in">exit</span></span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>创建文件的同时编写内容（注意换行与转义）：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">echo</span> -e <span class="string">"&lt;!DOCTYPE&gt;\n&lt;title&gt;Hello&lt;/title&gt;\n&lt;h1&gt;Hi&lt;/h1&gt;"</span> &gt; index.html </span><br><span class="line"><span class="built_in">echo</span> -e <span class="string">"h1&#123;color: red;&#125;"</span> &gt; css/style.css </span><br><span class="line"><span class="built_in">echo</span> -e <span class="string">"var string = \"Hello World\"\nalert(string)"</span> &gt; js/main.js</span><br></pre></td></tr></table></figure>
</li>
<li><p>返回值</p>
<ul>
<li><code>exit 0</code>表示没有错误</li>
<li><code>exit 1</code>表示错误代码为1</li>
</ul>
</li>
</ol>
<h2 id="用node-js写脚本"><a href="#用node-js写脚本" class="headerlink" title="用node.js写脚本"></a>用node.js写脚本</h2><p>运行JS脚本使用命令<code>node demo.js</code></p>
<h3 id="用JS切换目录"><a href="#用JS切换目录" class="headerlink" title="用JS切换目录"></a>用JS切换目录</h3><p><code>console.log(process.cwd())</code>  打印当前目录<br><code>// process.chdir(&#39;~/Desktop&#39;);</code>  这句话不行的，因为 JS 不认识 ~ 目录<br><code>process.chdir(&quot;/Users/frank/Desktop&quot;)</code></p>
<h3 id="JS脚本创建目录"><a href="#JS脚本创建目录" class="headerlink" title="JS脚本创建目录"></a>JS脚本创建目录</h3><ul>
<li><code>let fs = require(&#39;fs&#39;)</code>请求文件系统</li>
<li><code>fs.mkdirSync(&#39;demo&#39;)</code>创建目录</li>
</ul>
<h3 id="JS脚本创建文件"><a href="#JS脚本创建文件" class="headerlink" title="JS脚本创建文件"></a>JS脚本创建文件</h3><ul>
<li><code>let fs = require(&#39;fs&#39;)</code></li>
<li><code>fs.writeFileSync(&quot;./index.html&quot;, &quot;&quot;)</code>创建内容为空的文件</li>
</ul>
<h3 id="用JS脚本重写-demo-sh"><a href="#用JS脚本重写-demo-sh" class="headerlink" title="用JS脚本重写 demo.sh"></a>用JS脚本重写 demo.sh</h3><ol>
<li><p>创建~/local/jsdemo.js脚本</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/usr/bin/env node</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> dirName = process.argv[<span class="number">2</span>]<span class="comment">//你传的参数是从第二个开始</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (fs.existsSync(<span class="string">"./"</span> + dirName)) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"文件已经存在"</span>)</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  fs.mkdirSync(<span class="string">"./"</span> + dirName)</span><br><span class="line">  process.chdir(<span class="string">"./"</span> + dirName)</span><br><span class="line">  fs.mkdirSync(<span class="string">'css'</span>)</span><br><span class="line">  fs.mkdirSync(<span class="string">'js'</span>)</span><br><span class="line"></span><br><span class="line">  fs.writeFileSync(<span class="string">"./index.html"</span>, <span class="string">"&lt;!DOCTYPE&gt;\n&lt;title&gt;Hello&lt;/title&gt;\n&lt;h1&gt;Hi&lt;/h1&gt;"</span>)</span><br><span class="line">  fs.writeFileSync(<span class="string">"css/style.css"</span>, <span class="string">"h1&#123;color: red;&#125;"</span>)</span><br><span class="line">  fs.writeFileSync(<span class="string">"js/main.js"</span>, <span class="string">"var string = \"Hello World\"\nalert(string)"</span>)</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">process.exit(<span class="number">0</span>)</span><br></pre></td></tr></table></figure>
</li>
<li><p>进入桌面，运行<code>node ～/localjsdemo.js zzz</code>可以看到zzz目录创建成功</p>
</li>
</ol>
<h2 id="什么是PATH"><a href="#什么是PATH" class="headerlink" title="什么是PATH"></a>什么是PATH</h2><p>PATH的作用：在Bash中输入的命令（类似ls，cd等），实际上是一个都是一个脚本文件，Bash都会去PATH中寻找对应的文件，找到则运行该文件脚本。</p>
<ul>
<li>使用<code>type demo</code> 可以看到该命令的寻找过程</li>
<li>使用<code>which demo</code> 可以看到该命令的寻找结果</li>
</ul>
<h2 id="什么是shebang"><a href="#什么是shebang" class="headerlink" title="什么是shebang"></a>什么是shebang</h2><p>可以在脚本中配置执行环境，如在node.js脚本中第一行添加：<br><code>#!/usr/bin/env node</code> 则脚本自动运行在ndoe环境中</p>
<h2 id="shell命令中；、-amp-amp-与-的使用"><a href="#shell命令中；、-amp-amp-与-的使用" class="headerlink" title="shell命令中；、&amp;&amp;与||的使用"></a>shell命令中；、&amp;&amp;与||的使用</h2><h3 id="“-”运算符"><a href="#“-”运算符" class="headerlink" title="“;”运算符"></a>“;”运算符</h3><p>按先后顺序，一次执行多个命令<br>语法格式：<br><code>command1；command2；command3</code> </p>
<h3 id="“-amp-amp-”运算符"><a href="#“-amp-amp-”运算符" class="headerlink" title="“&amp;&amp;”运算符"></a>“&amp;&amp;”运算符</h3><p><code>&amp;&amp;</code>左边的命令（命令1）返回真(即返回0，成功被执行）后，<code>&amp;&amp;</code>右边的命令（命令2）才能够被执行；<br>换句话说，“如果这个命令执行成功&amp;&amp;那么执行这个命令”。<br>语法格式如下：<br><code>command1 &amp;&amp; command2 [&amp;&amp; command3 ...]</code></p>
<h3 id="“-”运算符-1"><a href="#“-”运算符-1" class="headerlink" title="“||”运算符"></a>“||”运算符</h3><p><code>||</code>则与<code>&amp;&amp;</code>相反。如果<code>||</code>左边的命令（命令1）未执行成功，那么就执行<code>||</code>右边的命令（命令2）；<br>换句话说，“如果这个命令执行失败了||那么就执行这个命令。<br>语法格式如下：<br><code>command1 || command2</code></p>
]]></content>
      <tags>
        <tag>学习笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>入门nodejs</title>
    <url>/2018/09/04/%E5%85%A5%E9%97%A8nodejs/</url>
    <content><![CDATA[<h2 id="网络与IP"><a href="#网络与IP" class="headerlink" title="网络与IP"></a>网络与IP</h2><p>HTTP协议的底层是由TCP和IP协议（TCP/IP）构建的</p>
<h3 id="什么是TCP"><a href="#什么是TCP" class="headerlink" title="什么是TCP"></a>什么是TCP</h3><p>TCP传输控制协议（Transmission Control Protocol）：按层次分，TCP位于传输层，提供可靠的字节流服务。<br>换句话说，为了更容易的传输大数据，TCP协议会把数据分割成以报文段为单位的数据包进行管理，并且TCP协议能够确认数据最终是否到达对方（一般指所谓的三次握手）。</p>
<ol>
<li>TCP与UDP的区别：<br>简答：TCP 可靠、面向连接、相对 UDP 较慢；UDP 不可靠，不面向连接、相对 TCP 较快。搞定。</li>
<li>TCP的三次握手：<ul>
<li>简答：每次建立连接前，客户端和服务端之前都要先进行三次对话才开始正式传输内容，三次对话大概是这样的：<ol>
<li>客户端：我要连接你了，可以吗</li>
<li>服务端：嗯，我准备好了，连接我吧</li>
<li>客户端：那我连接你咯。</li>
<li>开始后面步骤</li>
</ol>
</li>
<li>详细解答：握手过程中使用了TCP的标志（flag）——SYG（synchronize）和ACG（acknowledge）<ol>
<li>发送端：发送一个带SYG标志的数据包给对方</li>
<li>接收端：收到后，回传一个带SYG/ACK标志的数据包以示传达确认信息</li>
<li>发送端：收到后，再回传一个带ACK标志的数据包，代表握手结束。</li>
</ol>
</li>
</ul>
</li>
</ol>
<h3 id="IP网络协议（Internet-Protocol）"><a href="#IP网络协议（Internet-Protocol）" class="headerlink" title="IP网络协议（Internet Protocol）"></a>IP网络协议（Internet Protocol）</h3><p>从层次上分，IP网络协议位于网络层，其作用是把各种数据包传送给对方，为了确保数据传送到正确的对象，则需要满足一些条件，其中最重要的两个便是：IP地址与MAC地址</p>
<ul>
<li>IP地址指明了节点被分配到的地址</li>
<li>MAC地址是指的网卡所属的固定地址</li>
</ul>
<blockquote>
<p>注意：<br>IP是一种网络协议，而IP地址是类似127.0.0.1的地址。<br>IP地址可以与MAC地址进行匹配。IP地址可换，而MAC地址基本不会变。</p>
</blockquote>
<p>在互联网中，一般一个设备对应一个IP地址。通俗理解，IP地址分为内网IP与外网IP<br><img src="https://upload-images.jianshu.io/upload_images/12812641-4f2969ccc48bde69.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="内网与外网"></p>
<ul>
<li>电信服务商提供DNS服务，你从网页中输入的网址首先会去电信查找对应的IP地址。</li>
<li>路由器有一个「内网IP」与一个「外网IP」。<ul>
<li>内网中的设备可以互相访问（比如你可以用电脑或手机进入 <a href="http://192.168.1.1" target="_blank" rel="noopener">http://192.168.1.1</a> 来查看你的路由器），但是不能直接访问外网，内网设备想要访问外网，就必须经过路由器中转。</li>
<li>外网中的设备可以互相访问（比如 qq.com 可以把首页发送给你的路由器，你的路由器有外网 IP），但是外网中的设备无法访问你的内网设备。</li>
<li>外网的资源通过路由器的中转传达至内网的各个设备中，路由器在其中充当指路人的角色。</li>
</ul>
</li>
<li>路由器没有固定的「外网IP」，都是临时分配的，类似14.17.32.21，每次路由器重启都会被重新分配一个IP地址。</li>
<li>路由器与其wifi组成整个内网，在内网中的每个设备都有一个对应的「外网IP」，类似192.168.1.1，这个内网IP也不是固定的，一般设备断开wifi重连都会改变内网IP地址。</li>
<li>两个特殊的IP，本地IP 127.0.0.1 代表设备自身，特别的IP 0.0.0.0 不表示任何设备。</li>
</ul>
<h3 id="端口"><a href="#端口" class="headerlink" title="端口"></a>端口</h3><p>端口其实就是一个编号，并不是一种硬件。<br>一个服务器（硬件）不一定只提供一种服务，比如一个服务器既提供 HTTP 服务，又提供 FTP 服务，还提供 SMTP 服务（邮件服务），那么只用一个 IP 是无法告诉服务器你想要使用哪种服务。</p>
<p>所以这里有一个重要的原则：一个端口对应一个服务。</p>
<ul>
<li>HTTP服务 80端口</li>
<li>HTTPS服务 443端口</li>
<li>FTP服务 21端口</li>
</ul>
<p>每个机器一共有65535（2的16次方减一）个端口（协议规定）</p>
<ol>
<li>0到1023（2的10次方减一）号端口留给系统使用。</li>
<li>其他端口用户用</li>
<li>如果端口被占用，需要停掉该端口的服务才能再次使用。</li>
</ol>
<h2 id="写一个简易的HTTP-Server"><a href="#写一个简易的HTTP-Server" class="headerlink" title="写一个简易的HTTP Server"></a>写一个简易的HTTP Server</h2><h3 id="创建一个后台服务"><a href="#创建一个后台服务" class="headerlink" title="创建一个后台服务"></a>创建一个后台服务</h3><p>任何网络服务应用程序总是要先创建一个服务对象。这在 Node.js 中通常通过 createServer 方法。<br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> http = <span class="built_in">require</span>(<span class="string">'http'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> server = http.createServer(<span class="function"><span class="keyword">function</span>(<span class="params">request, response</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// magic happens here!</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p>
<p>每当有 HTTP 请求到达服务器时，<code>createServer</code> 中传入的函数就被自动执行。所以这个函数也被称为是请求处理函数。<br>当一个 HTTP 到达服务端，node 调用 request 处理程序，并产生一些唾手可得的对象用以处理传输，这些对象就是 request 和 response。。</p>
<h3 id="监听端口"><a href="#监听端口" class="headerlink" title="监听端口"></a>监听端口</h3><p>实际上，为了处理请求，listen 方法需要在 server 对象上被显式调用。在大多数情况下，你只要把端口号作为参数传入 listen 方法中，作为监听端口即可。<br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> port = process.argv[<span class="number">2</span>]<span class="comment">//命令的第三个参数</span></span><br><span class="line"></span><br><span class="line">server.listen(port)</span><br></pre></td></tr></table></figure></p>
<h3 id="请求方法、访问地址以及请求头"><a href="#请求方法、访问地址以及请求头" class="headerlink" title="请求方法、访问地址以及请求头"></a>请求方法、访问地址以及请求头</h3><p>当处理一个请求时，第一件事你需要做的是看一下这个方法和其访问地址，以此决定你到底采取何种合理的行为。Node 通过把这些行为属性附加到 request 对象上，使得我们处理起来相对而言可以轻松一些。<br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> method = request.method</span><br><span class="line"><span class="keyword">var</span> path = request.url</span><br></pre></td></tr></table></figure></p>
<p>这里的 <code>method</code> 总是一个普通的 HTTP 方法动作行为 (verb)，<code>path</code> 是指没有服务器协议和 端口号的完整访问地址。一个典型的访问地址通常意味着包括第三个斜杠以及后面的所有内容。<br>请求头也不是很难得到，它们也在 request 对象里，称为 headers。<br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> headers = request.headers</span><br><span class="line"><span class="keyword">var</span> userAgent = headers[<span class="string">'user-agent'</span>]</span><br></pre></td></tr></table></figure></p>
<blockquote>
<p>所有的请求头全是小写字母，而不管实际上它们是怎么进行传输的。所以在无论任何 情况下，解析请求头就得到了简化。<br>如果一些请求头出现重复，它们的值不是被覆盖，就是通过英文分号进行分割。</p>
</blockquote>
<h3 id="设置响应头"><a href="#设置响应头" class="headerlink" title="设置响应头"></a>设置响应头</h3><p>响应头通过一个 <code>setHeader</code> 的属性很方便的设置。<br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">response.setHeader(<span class="string">'Content-Type'</span>, <span class="string">'application/json'</span>);</span><br><span class="line">response.setHeader(<span class="string">'X-Powered-By'</span>, <span class="string">'bacon'</span>);</span><br></pre></td></tr></table></figure></p>
<p>设置响应头时，它们的名字是大小写敏感的。如果你重复设置响应头，最后一次设置的值也就是系统得到的值。</p>
<h3 id="发送响应体"><a href="#发送响应体" class="headerlink" title="发送响应体"></a>发送响应体</h3><p>既然 <code>response</code> 对象是一个 <code>WritableStre</code>，向客户端写入返回体只是一个普通的流方法的问题。<br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">response.write(<span class="string">'&lt;!DOCTYPE&gt;\n&lt;html&gt;'</span>  + </span><br><span class="line">      <span class="string">'&lt;head&gt;&lt;link rel="stylesheet" href="/style.js"&gt;'</span> +</span><br><span class="line">      <span class="string">'&lt;/head&gt;&lt;body&gt;'</span>  +</span><br><span class="line">      <span class="string">'&lt;h1&gt;你好&lt;/h1&gt;'</span> +</span><br><span class="line">      <span class="string">'&lt;script src="/script.html"&gt;&lt;/script&gt;'</span> +</span><br><span class="line">      <span class="string">'&lt;/body&gt;&lt;/html&gt;'</span>)</span><br><span class="line">response.end();</span><br></pre></td></tr></table></figure></p>
<p>也可以将响应体放在<code>end</code>方法中。</p>
<h3 id="关于错误"><a href="#关于错误" class="headerlink" title="关于错误"></a>关于错误</h3><p>请求与响应若是发生错误，则会自动触发自身的<code>error</code>事件。如果你不去处理监听这个事件，此错误将被抛出，这导致你的程序崩溃。 你应该无论如何都要添加 ‘error’ 事件去监听你的请求对象，哪怕你只是做一个日志或者用你自己的独有方式去处理。<br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">request.on(<span class="string">'error'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// This prints the error message and stack trace to `stderr`.</span></span><br><span class="line">  <span class="built_in">console</span>.error(err);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">response.on(<span class="string">'error'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// This prints the error message and stack trace to `stderr`.</span></span><br><span class="line">  <span class="built_in">console</span>.error(err);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p>
<h3 id="HTTP-状态码"><a href="#HTTP-状态码" class="headerlink" title="HTTP 状态码"></a>HTTP 状态码</h3><p>如果你嫌麻烦不想设置它，返回客户端的默认状态码总是 200。当然，不是每个 HTTP 返回码必须都是 200，在某些情况下你一定希望返回一个不同的状态码，所以你应该设置 statusCode 属性。<br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">response.statusCode = <span class="number">404</span>;</span><br></pre></td></tr></table></figure></p>
<h3 id="代码示例"><a href="#代码示例" class="headerlink" title="代码示例"></a>代码示例</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> http = <span class="built_in">require</span>(<span class="string">'http'</span>)</span><br><span class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>)</span><br><span class="line"><span class="keyword">var</span> url = <span class="built_in">require</span>(<span class="string">'url'</span>)</span><br><span class="line"><span class="keyword">var</span> port = process.argv[<span class="number">2</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(!port)&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'请指定端口号好不啦？\nnode server.js 8888 这样不会吗？'</span>)</span><br><span class="line">  process.exit(<span class="number">1</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> server = http.createServer(<span class="function"><span class="keyword">function</span>(<span class="params">request, response</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">var</span> parsedUrl = url.parse(request.url, <span class="literal">true</span>)</span><br><span class="line">  <span class="keyword">var</span> path = request.url </span><br><span class="line">  <span class="keyword">var</span> query = <span class="string">''</span></span><br><span class="line">  <span class="keyword">if</span>(path.indexOf(<span class="string">'?'</span>) &gt;= <span class="number">0</span>)&#123; query = path.substring(path.indexOf(<span class="string">'?'</span>)) &#125;</span><br><span class="line">  <span class="keyword">var</span> pathNoQuery = parsedUrl.pathname</span><br><span class="line">  <span class="keyword">var</span> queryObject = parsedUrl.query</span><br><span class="line">  <span class="keyword">var</span> method = request.method</span><br><span class="line"></span><br><span class="line">  <span class="comment">/******** 从这里开始看，上面不要看 ************/</span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'HTTP 路径为\n'</span> + path)</span><br><span class="line">  <span class="keyword">if</span>(path == <span class="string">'/style.js'</span>)&#123;</span><br><span class="line">    response.setHeader(<span class="string">'Content-Type'</span>, <span class="string">'text/css; charset=utf-8'</span>)</span><br><span class="line">    response.write(<span class="string">'body&#123;background-color: #ddd;&#125;h1&#123;color: red;&#125;'</span>)</span><br><span class="line">    response.end()</span><br><span class="line">  &#125;<span class="keyword">else</span> <span class="keyword">if</span>(path == <span class="string">'/script.html'</span>)&#123;</span><br><span class="line">    response.setHeader(<span class="string">'Content-Type'</span>, <span class="string">'text/javascript; charset=utf-8'</span>)</span><br><span class="line">    response.write(<span class="string">'alert("这是JS执行的")'</span>)</span><br><span class="line">    response.end()</span><br><span class="line">  &#125;<span class="keyword">else</span> <span class="keyword">if</span>(path == <span class="string">'/index.css'</span>)&#123;</span><br><span class="line">    response.setHeader(<span class="string">'Content-Type'</span>, <span class="string">'text/html; charset=utf-8'</span>)</span><br><span class="line">    response.write(<span class="string">'&lt;!DOCTYPE&gt;\n&lt;html&gt;'</span>  + </span><br><span class="line">      <span class="string">'&lt;head&gt;&lt;link rel="stylesheet" href="/style.js"&gt;'</span> +</span><br><span class="line">      <span class="string">'&lt;/head&gt;&lt;body&gt;'</span>  +</span><br><span class="line">      <span class="string">'&lt;h1&gt;你好&lt;/h1&gt;'</span> +</span><br><span class="line">      <span class="string">'&lt;script src="/script.html"&gt;&lt;/script&gt;'</span> +</span><br><span class="line">      <span class="string">'&lt;/body&gt;&lt;/html&gt;'</span>)</span><br><span class="line">    response.end()</span><br><span class="line">  &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    response.statusCode = <span class="number">404</span></span><br><span class="line">    response.end()</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/******** 代码结束，下面不要看 ************/</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">server.listen(port)</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'监听 '</span> + port + <span class="string">' 成功\n请用在空中转体720度然后用电饭煲打开 http://localhost:'</span> + port)</span><br></pre></td></tr></table></figure>
<p>以上内容参考<a href="https://nodejs.org/zh-cn/docs/guides/anatomy-of-an-http-transaction/#" target="_blank" rel="noopener">node官网</a>,感兴趣的可以去看看。</p>
]]></content>
      <tags>
        <tag>学习笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>写一个网易云音乐</title>
    <url>/2018/09/01/%E5%86%99%E4%B8%80%E4%B8%AA%E7%BD%91%E6%98%93%E4%BA%91%E9%9F%B3%E4%B9%90/</url>
    <content><![CDATA[<h2 id="背景介绍"><a href="#背景介绍" class="headerlink" title="背景介绍"></a>背景介绍</h2><p>根据网易云音乐移动端网页(<a href="https://music.163.com/m/" target="_blank" rel="noopener">music.163.com/m/</a>)制作一个网易云音乐。</p>
<h2 id="需求分析"><a href="#需求分析" class="headerlink" title="需求分析"></a>需求分析</h2><p>分析该网页的需求：</p>
<h3 id="用例图（use-case）"><a href="#用例图（use-case）" class="headerlink" title="用例图（use case）"></a>用例图（use case）</h3><p><img src="https://upload-images.jianshu.io/upload_images/12812641-c2f774ed0050fab8.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="网易云-例图 (2).png"><br><img src="https://upload-images.jianshu.io/upload_images/12812641-7a59355eb5feee50.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="管理员.png"></p>
<h3 id="线框图（Strentch）"><a href="#线框图（Strentch）" class="headerlink" title="线框图（Strentch）"></a>线框图（Strentch）</h3><p>线框图也就是常说的草图，一般由UI提供，这里只有由我们自己根据网页设计了<br><img src="https://upload-images.jianshu.io/upload_images/12812641-dee96be7e65a9f0e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt><br><img src="https://upload-images.jianshu.io/upload_images/12812641-7e795a8a45eb5572.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="线框图"></p>
<h3 id="数据库"><a href="#数据库" class="headerlink" title="数据库"></a>数据库</h3><p>从前端到后端的简单交互，数据库用到了Leancloud与七牛。<br><img src="https://upload-images.jianshu.io/upload_images/12812641-30df0149312ae603.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="架构图"></p>
<h2 id="相关数据库引入"><a href="#相关数据库引入" class="headerlink" title="相关数据库引入"></a>相关数据库引入</h2><h3 id="引入Leancloud"><a href="#引入Leancloud" class="headerlink" title="引入Leancloud"></a>引入Leancloud</h3><ol>
<li>注册账号并创建一个名为163music的应用，用来储存项目的数据。</li>
<li>页面中引入相关文件<code>&lt;script src=&quot;../node_modules/leancloud-storage/dist/av-min.js&quot;&gt;&lt;/script&gt;</code></li>
<li><p>查看文档，开始使用leancloud相关API。<br>初始化Av：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> APP_ID = <span class="string">'...'</span>;</span><br><span class="line"><span class="keyword">var</span> APP_KEY = <span class="string">'...'</span>;</span><br><span class="line"></span><br><span class="line">AV.init(&#123;</span><br><span class="line">    appId: APP_ID,</span><br><span class="line">    appKey: APP_KEY</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
</li>
<li><p>测试数据库是否创建成功：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//创建数据歌单</span></span><br><span class="line"><span class="keyword">var</span> TestObject = AV.Object.extend(<span class="string">'TestObject'</span>);</span><br><span class="line"><span class="comment">//创建一条记录</span></span><br><span class="line"><span class="keyword">var</span> testObject = <span class="keyword">new</span> TestObject();</span><br><span class="line"><span class="comment">//保存记录</span></span><br><span class="line">testObject.save(&#123;</span><br><span class="line">    words: <span class="string">'Hello World!'</span></span><br><span class="line">&#125;).then(<span class="function"><span class="keyword">function</span>(<span class="params">object</span>) </span>&#123;</span><br><span class="line">    alert(<span class="string">'LeanCloud Rocks!'</span>);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
</li>
<li><p>在leancloud控制面板（ 控制台 &gt; 存储 &gt; 数据 &gt; TestObject）查看数据，确认 TestObject 创建了一条新数据</p>
</li>
</ol>
<h3 id="引入七牛"><a href="#引入七牛" class="headerlink" title="引入七牛"></a>引入七牛</h3><ol>
<li>创建账号 &gt; 控制台 &gt; 对象储存 &gt; 新建储存空间</li>
<li><p>自己创建一个nodejs server服务器</p>
<ul>
<li>进入七牛挂网，选择Node.js</li>
<li><code>npm init -y</code>、<code>npm install qiniu</code></li>
<li>添加<code>/uptoken</code>路由</li>
<li>根据官方文档，写出后端代码，获取密钥：  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"> <span class="keyword">if</span>(path===<span class="string">'/uptoken'</span>)&#123;</span><br><span class="line">    response.statusCode = <span class="number">200</span></span><br><span class="line">    response.setHeader(<span class="string">'Content-Type'</span>, <span class="string">'text/json;charset=utf-8'</span>)</span><br><span class="line">    response.setHeader(<span class="string">'Access-Control-Allow-Origin'</span>, <span class="string">'*'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> config = fs.readFileSync(<span class="string">'./qiniu-key.json'</span>)</span><br><span class="line">    config = <span class="built_in">JSON</span>.parse(config)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> &#123;accessKey, secretKey&#125; = config;</span><br><span class="line">    <span class="keyword">var</span> mac = <span class="keyword">new</span> qiniu.auth.digest.Mac(accessKey, secretKey);</span><br><span class="line">    <span class="keyword">var</span> options = &#123;</span><br><span class="line">        scope: <span class="string">'163music'</span></span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">var</span> putPolicy = <span class="keyword">new</span> qiniu.rs.PutPolicy(options);</span><br><span class="line">    <span class="keyword">var</span> uploadToken=putPolicy.uploadToken(mac);</span><br><span class="line">    response.write(<span class="string">`</span></span><br><span class="line"><span class="string">        &#123;</span></span><br><span class="line"><span class="string">            "uptoken": "<span class="subst">$&#123;uploadToken&#125;</span>"</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string">    `</span>)</span><br><span class="line">    response.end()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ul>
<ul>
<li>将<code>uploadToken</code>作为响应输出</li>
<li><code>node server.js 8888</code>,启动server </li>
</ul>
</li>
<li><p>查看七牛文档使用相关API，参考<a href="http://jssdk.demo.qiniu.io/" target="_blank" rel="noopener">七牛的示例</a>,文档中心 &gt; SDK &gt; JavaScript SDK（本文使用1.x版本）</p>
<ul>
<li>引入plupload 2.x，<code>npm install plupload@2.3.6</code></li>
<li>引入qiniu-js 1.x, <code>npm install qiniu-js@1.0.22</code><br>  <code>&lt;script src=&quot;../node_modules/qiniu-js/dist/qiniu.min.js&quot;&gt;&lt;/script&gt;</code></li>
<li>初始化上传按钮：  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//引入Plupload 、qiniu.js后</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> uploader = Qiniu.uploader(&#123;</span><br><span class="line">    runtimes: <span class="string">'html5'</span>,    <span class="comment">//上传模式,依次退化</span></span><br><span class="line">    </span><br><span class="line">    browse_button: <span class="string">'load'</span>,       <span class="comment">//上传选择的点选按钮，**必需**</span></span><br><span class="line">    uptoken_url: <span class="string">'http://localhost:8888/uptoken'</span>,            <span class="comment">//Ajax请求upToken的Url，**强烈建议设置**（服务端提供）</span></span><br><span class="line">    <span class="comment">// uptoken : '', //若未指定uptoken_url,则必须指定 uptoken ,uptoken由其他程序生成</span></span><br><span class="line">    <span class="comment">// unique_names: true, // 默认 false，key为文件名。若开启该选项，SDK为自动生成上传成功后的key（文件名）。</span></span><br><span class="line">    <span class="comment">// save_key: true,   // 默认 false。若在服务端生成uptoken的上传策略中指定了 `sava_key`，则开启，SDK会忽略对key的处理</span></span><br><span class="line">    domain: <span class="string">'http://qiniu-plupload.qiniudn.com/'</span>,   <span class="comment">//bucket 域名，下载资源时用到，**必需**</span></span><br><span class="line">    get_new_uptoken: <span class="literal">false</span>,  <span class="comment">//设置上传文件的时候是否每次都重新获取新的token</span></span><br><span class="line">    container: <span class="string">'container'</span>,           <span class="comment">//上传区域DOM ID，默认是browser_button的父元素，</span></span><br><span class="line">    max_file_size: <span class="string">'40mb'</span>,           <span class="comment">//最大文件体积限制</span></span><br><span class="line">    dragdrop: <span class="literal">true</span>,                   <span class="comment">//开启可拖曳上传</span></span><br><span class="line">    drop_element: <span class="string">'container'</span>,        <span class="comment">//拖曳上传区域元素的ID，拖曳文件或文件夹后可触发上传</span></span><br><span class="line">    chunk_size: <span class="string">'4mb'</span>,                <span class="comment">//分块上传时，每片的体积</span></span><br><span class="line">    auto_start: <span class="literal">true</span>,                 <span class="comment">//选择文件后自动上传，若关闭需要自己绑定事件触发上传</span></span><br><span class="line">    init: &#123;</span><br><span class="line">        <span class="string">'FilesAdded'</span>: <span class="function"><span class="keyword">function</span>(<span class="params">up, files</span>) </span>&#123;</span><br><span class="line">            plupload.each(files, <span class="function"><span class="keyword">function</span>(<span class="params">file</span>) </span>&#123;</span><br><span class="line">                <span class="comment">// 文件添加进队列后,处理相关的事情</span></span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">'BeforeUpload'</span>: <span class="function"><span class="keyword">function</span>(<span class="params">up, file</span>) </span>&#123;</span><br><span class="line">                <span class="comment">// 每个文件上传前,处理相关的事情</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">'UploadProgress'</span>: <span class="function"><span class="keyword">function</span>(<span class="params">up, file</span>) </span>&#123;</span><br><span class="line">                <span class="comment">// 每个文件上传时,处理相关的事情</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">'FileUploaded'</span>: <span class="function"><span class="keyword">function</span>(<span class="params">up, file, info</span>) </span>&#123;</span><br><span class="line">                <span class="comment">// 每个文件上传成功后,处理相关的事情</span></span><br><span class="line">                <span class="comment">// 其中 info.response 是文件上传成功后，服务端返回的json，形式如</span></span><br><span class="line">                <span class="comment">// &#123;</span></span><br><span class="line">                <span class="comment">//    "hash": "Fh8xVqod2MQ1mocfI4S4KpRL6D98",</span></span><br><span class="line">                <span class="comment">//    "key": "gogopher.jpg"</span></span><br><span class="line">                <span class="comment">//  &#125;</span></span><br><span class="line">                <span class="comment">// 参考http://developer.qiniu.com/docs/v6/api/overview/up/response/simple-response.html</span></span><br><span class="line"></span><br><span class="line">                <span class="comment">// var domain = up.getOption('domain');</span></span><br><span class="line">                <span class="comment">// var res = parseJSON(info.response);</span></span><br><span class="line">                <span class="comment">// var sourceLink = domain + res.key; 获取上传成功后的文件的Url</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">'Error'</span>: <span class="function"><span class="keyword">function</span>(<span class="params">up, err, errTip</span>) </span>&#123;</span><br><span class="line">                <span class="comment">//上传出错时,处理相关的事情</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">'UploadComplete'</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">                <span class="comment">//队列文件处理完毕后,处理相关的事情</span></span><br><span class="line">        &#125;，</span><br><span class="line">        <span class="string">'Key'</span>: <span class="function"><span class="keyword">function</span>(<span class="params">up, file</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 若想在前端对每个文件的key进行个性化处理，可以配置该函数</span></span><br><span class="line">            <span class="comment">// 该配置必须要在 unique_names: false , save_key: false 时才生效</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">var</span> key = <span class="string">""</span>;</span><br><span class="line">            <span class="comment">// do something with key here</span></span><br><span class="line">            <span class="keyword">return</span> key</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
</ol>
]]></content>
      <tags>
        <tag>作品学习纪录</tag>
      </tags>
  </entry>
  <entry>
    <title>pikachu总结</title>
    <url>/2018/08/26/pikachu%E6%80%BB%E7%BB%93/</url>
    <content><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>利用纯css画一个皮卡丘，再用js使它动起来，js部分可以参考会动的简历。<br>主要知识点：</p>
<ol>
<li><p>利用定位居中：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.nose</span>&#123;</span><br><span class="line">    <span class="attribute">width</span>:<span class="number">0</span>;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">left</span>:<span class="number">50%</span>;</span><br><span class="line">    margin-left: -12px;// transform: translateX(-50%);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>画pikachu的嘴唇<br>只设置一部分border及相关属性。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.upperLip</span>&#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">65px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">30px</span>;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">3px</span> black solid;</span><br><span class="line">    <span class="attribute">border-top</span>: none;</span><br><span class="line">    <span class="attribute">border-right</span>: none;</span><br><span class="line">    <span class="attribute">border-bottom-left-radius</span>: <span class="number">120px</span> <span class="number">65px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p><code>border-radius</code>分开设置的时候，是先设置上下，后设置左右。</p>
</blockquote>
</li>
<li>椭圆<br><code>border-radius: 15px/10px;</code></li>
</ol>
<h2 id="遇到的问题"><a href="#遇到的问题" class="headerlink" title="遇到的问题"></a>遇到的问题</h2><ul>
<li><p>调速问题<br><code>setInterval</code>函数只会读取一次时间，可以利用<code>setTimeout</code>递归调用自身实现，从而读取时间。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> n = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">let</span> id = setInterval(<span class="function"><span class="params">()</span>=&gt;</span>&#123;</span><br><span class="line">    n += <span class="number">1</span>;</span><br><span class="line">    domcode.innerHTML = prefix + css.substring(<span class="number">0</span>,n)；</span><br><span class="line">    stylecode.innerHTML = prefix + css.substring(<span class="number">0</span>,n);</span><br><span class="line">    domcode.scrollTop = domcode.scrollHeight;</span><br><span class="line">    <span class="keyword">if</span>(n &gt;= css.length)&#123;</span><br><span class="line">        <span class="built_in">window</span>.clearInterval(id)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;,<span class="number">50</span>)</span><br><span class="line">可以转换成</span><br><span class="line"><span class="keyword">let</span> n = <span class="number">0</span>;                                                      </span><br><span class="line"><span class="keyword">let</span> id = setTimeout(<span class="function"><span class="keyword">function</span> <span class="title">adjust</span>(<span class="params"></span>)</span>&#123;<span class="comment">//注意给函数名字，方便调用。</span></span><br><span class="line">    n += <span class="number">1</span>; </span><br><span class="line">    domcode.innerHTML =prefix +  code.substring(<span class="number">0</span>,n);</span><br><span class="line">    style.innerHTML = prefix + code.substring(<span class="number">0</span>,n);</span><br><span class="line">    domcode.scrollTop = domcode.scrollHeight;</span><br><span class="line">    <span class="keyword">if</span>(n &lt; code.length)&#123;</span><br><span class="line">        id = setTimeout(adjust,time)</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        clearTimeout(id)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;,time)</span><br></pre></td></tr></table></figure>
</li>
<li><p>点击按钮调速实现<br>点击的按钮切换状态，要注意class类的转变。<code>class=&quot;slow&quot;</code>===&gt;<code>class=&quot;slow active&quot;</code>,此时利用class类做条件判断应该选择<code>slow activc</code>而非<code>slow</code><br><img src="https://upload-images.jianshu.io/upload_images/12812641-720d3c7e444085c3.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p>
</li>
</ul>
]]></content>
  </entry>
  <entry>
    <title>会动的简历总结</title>
    <url>/2018/08/25/%E4%BC%9A%E5%8A%A8%E7%9A%84%E7%AE%80%E5%8E%86%E6%80%BB%E7%BB%93/</url>
    <content><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>该简历是利用基础知识制作，主要涉及的知识点：</p>
<ol>
<li><code>pre</code>标签的使用<br><code>per</code>标签会在页面中呈现你写的内容，包括空格与换行。<br><code>pre</code>内的标签会被当成<code>html</code>解析，利用此给代码高亮。</li>
<li>js多行字符串使用” ` ` “符号</li>
<li>字符串<code>substring</code>方法的使用</li>
<li>滚动条自动下拉倒底部：<code>xxx.scrollTop = xxx.scrollHeight</code></li>
<li>异步与回调</li>
<li>两个js库：primjs，高亮代码；showdownjs，将markdown转化成html。</li>
</ol>
<h2 id="遇到的问题"><a href="#遇到的问题" class="headerlink" title="遇到的问题"></a>遇到的问题</h2><ul>
<li>回调函数作用域问题<br>未解决</li>
<li>执行函数写在开头遇到的substring未定义报错<br>变量提升的是声明并不是赋值！<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">a.substring(<span class="number">0</span>,<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> a = <span class="string">'123456789'</span></span><br><span class="line"></span><br><span class="line">等价于</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> a</span><br><span class="line"></span><br><span class="line">a.substring(<span class="number">0</span>,<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">a = <span class="string">'123456'</span></span><br></pre></td></tr></table></figure></li>
</ul>
]]></content>
      <tags>
        <tag>总结</tag>
      </tags>
  </entry>
  <entry>
    <title>浅析面向对象</title>
    <url>/2018/08/23/%E6%B5%85%E6%9E%90%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/</url>
    <content><![CDATA[<p>一直以来关于什么是面向对象这个问题，没有标准答案，每个人都有自己对面向对象的理解，故写下博客记录自己学习时对面向对象的理解。</p>
]]></content>
      <tags>
        <tag>学习笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>如何在deepin上使用SSR</title>
    <url>/2018/08/21/%E5%A6%82%E4%BD%95%E5%9C%A8deepin%E4%B8%8A%E4%BD%BF%E7%94%A8SSR/</url>
    <content><![CDATA[<h3 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h3><p>前段时间由于某些原因，我从使用ss转到ssr，之前使用的windows系统有好用的ssr客户端，但后来为了更好的学习前端转到deepin深度系统。<br>由于是ubantu类系统，刚开始没有找到好用的ssr客户端，使用的是命令行的方式，这种方式带来的不便之处就是系统处于全局代理，由此造成的结果便是你用网易云音乐听歌会发现被代理，此时我才知道网易云音乐在海外大部分歌是没法听的，估计海外的同胞想用网易云来听歌都要进国内吧。哈哈哈，这让我想起《围城》里的一句话：</p>
<blockquote>
<p>婚姻是一座围城，城外的人想进去，城里的人想出来</p>
</blockquote>
<p>废话不多说，接下来介绍在deepin下（也就是ubantu下）如何使用ssr，主要有两种方法：</p>
<ul>
<li>方法1：基于命令行实现</li>
<li>方法2：使用electron-ssr客户端</li>
</ul>
<p>第一种方法很常见，网上搜一大堆教程，在此不再赘述，本文主要介绍第二种方法。方法1使用的是命令行，而此种方法使用的图形界面，图形界面对于小白而言总是很友好的。</p>
<h3 id="下载客户端electron-ssr"><a href="#下载客户端electron-ssr" class="headerlink" title="下载客户端electron-ssr"></a>下载客户端electron-ssr</h3><p>   在<a href="https://github.com/shadowsocksrr/shadowsocks-rss" target="_blank" rel="noopener">ssr</a>作者Github官网下载electron-ssr(<a href="https://github.com/erguotou520/electron-ssr/releases" target="_blank" rel="noopener">下载直达</a>)找到最新的deb版本。本文使用的是<a href="https://github.com/erguotou520/electron-ssr/releases/download/v0.2.3/electron-ssr_0.2.3_amd64.deb" target="_blank" rel="noopener">electron-ssr_0.2.3_amd.deb</a></p>
<h3 id="使用命令行安装："><a href="#使用命令行安装：" class="headerlink" title="使用命令行安装："></a>使用命令行安装：</h3><p><code>sudo dpkg -i electron-ssr_0.2.3_amd64.deb</code><br>打开客户端。<br>注意：</p>
<pre><code>1. 要在安装包所在的目录使用，记得修改安装包的文件名。
2. 如果打开客户端半天没有反应，重启电脑即可。 
</code></pre><h3 id="添加ssr配置信息"><a href="#添加ssr配置信息" class="headerlink" title="添加ssr配置信息"></a>添加ssr配置信息</h3><p>   跟在window上使用一样，正常添加服务器相关配置即可。<br>   <img src="https://upload-images.jianshu.io/upload_images/12812641-b80fbfcbf493e9f9.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="electron-ssr界面"></p>
<h3 id="终端代理"><a href="#终端代理" class="headerlink" title="终端代理"></a>终端代理</h3><p>   如果想在终端中使用代理，在配置中选中<a href="https://github.com/erguotou520/electron-ssr/blob/master/docs/HTTP_PROXY.md" target="_blank" rel="noopener">http代理</a>。<br>   <img src="https://upload-images.jianshu.io/upload_images/12812641-7fbb95d6bf7d9e82.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="终端代理"><br>   在命令行里输入下列代码设置命令行代理：<br>   <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">export</span> http_proxy=<span class="string">"http://127.0.0.1:http代理端口"</span></span><br><span class="line"><span class="built_in">export</span> https_proxy=<span class="string">"http://127.0.0.1:http代理端口"</span></span><br></pre></td></tr></table></figure></p>
<p>之后你便会惊奇的发现Google的同时，网易云音乐可以听歌了，不用像谷歌百度搜的那样，听歌的时候关掉系统代理，现在想起来是不是很脑残！！<br>本文主要参考<a href="https://huur.cn/course/1513.html" target="_blank" rel="noopener">MTPAS博客</a>、ssr作者<a href="https://github.com/shadowsocksrr/shadowsocks-rss" target="_blank" rel="noopener">Github</a>及electron-ssr作者<a href="https://github.com/erguotou520/electron-ssr" target="_blank" rel="noopener">Github</a>。</p>
]]></content>
      <tags>
        <tag>deepin系统相关</tag>
      </tags>
  </entry>
  <entry>
    <title>HTTP入门</title>
    <url>/2018/08/20/HTTP%E5%85%A5%E9%97%A8/</url>
    <content><![CDATA[<h2 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h2><h3 id="三个基本概念"><a href="#三个基本概念" class="headerlink" title="三个基本概念"></a>三个基本概念</h3><ol>
<li>URI：统一资源资源标志符(Uniform Resource Identifier) </li>
<li>HTTP：超文本传输协议(HyperText Transfer Protocal)</li>
<li>HTML：超文本标记语言(HyperText Markup Language)</li>
</ol>
<h3 id="URI"><a href="#URI" class="headerlink" title="URI"></a>URI</h3><p>URI是一个用于标识某一互联网资源名称的字符串，也就是由某个协议方案表示的资源的定位标识符。<br>URI常见的两种形式：</p>
<ul>
<li>URN(Uniform Resource Name):用字符串标识某一互联网资源。ISBN: 9787115275790 就是一个 URN，通过 URN 你可以确定一个「唯一的」资源。</li>
<li>URL(Uniform Resource Locator）：我们一般使用URL作为网址，表示资源的地址。<a href="https://www.baidu.com/s?wd=hello&amp;rsv_spt=1#5" target="_blank" rel="noopener">https://www.baidu.com/s?wd=hello&amp;rsv_spt=1#5</a> 就是一个 URL，通过 URL 你可以确定一个「唯一的」地址（网址）。<br>其包括：协议+登录信息（可选）+域名(服务器地址)+服务器端口号+路径+查询字符串+锚点(片段标识符)：<br><img src="https://upload-images.jianshu.io/upload_images/12812641-460eed5fd5e2cb6d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="URL的常见组成"></li>
</ul>
<h3 id="DNS"><a href="#DNS" class="headerlink" title="DNS"></a>DNS</h3><p>DNS（Domain Name System）域名系统，是一种负责域名解析协议，它提供域名到ip地址之间的解析服务。<br>使用命令行 <code>nslookup baiducom</code> 可以看到baidu.com的ip地址。<br>使用命令行<code>ping baidu.com</code>命令，可以查看该网址能否联通。</p>
<h2 id="请求与响应"><a href="#请求与响应" class="headerlink" title="请求与响应"></a>请求与响应</h2><h3 id="服务器与浏览器的交互"><a href="#服务器与浏览器的交互" class="headerlink" title="服务器与浏览器的交互"></a>服务器与浏览器的交互</h3><p>Server + Clilent +　HTTP协议</p>
<ul>
<li>浏览器负责发起请求</li>
<li>服务器在80端口接受内容</li>
<li>服务器返回请求的内容</li>
</ul>
<p>HTTP协议作用就是指导浏览器与服务器如何进行通信。</p>
<h3 id="HTTP请求"><a href="#HTTP请求" class="headerlink" title="HTTP请求"></a>HTTP请求</h3><p>请求主要由4部分组成：</p>
<blockquote>
<p>POST / HTTP/1.1<br>Host: <a href="http://www.baidu.com" target="_blank" rel="noopener">www.baidu.com</a><br>User-Agent: curl/7.54.0<br>Accept: */*<br>Content-Type: application/x-www-form-urlencoded<br>Content-Length: 10</p>
</blockquote>
<p>请求的格式：</p>
<blockquote>
<p>1 动词 路径 协议/版本<br>2 Key1: value1<br>2 Key2: value2<br>2 Key3: value3<br>2 Content-Type: application/x-www-form-urlencoded<br>2 Content-Length: 10<br>2 Host: <a href="http://www.baidu.com" target="_blank" rel="noopener">www.baidu.com</a><br>2 User-Agent: curl/7.54.0<br>3<br>4 要上传的数据</p>
</blockquote>
<ol>
<li>第一部分</li>
</ol>
<ul>
<li>动词<code>POST</code>是一种请求方法，常见的请求方法有：GET POST PUT PATCH DELETE HEAD OPTIONS 等。</li>
<li>路径<code>/</code>，包括查询参数，但是不包括锚点。如果没有写路径则默认“/”。</li>
<li><code>HTTP/1.1</code>指的发起请求遵循的协议与协议版本，目前主要使用HTTP协议。</li>
</ul>
<ol start="2">
<li>第二部分：<br>第二部分内容主要是以<code>key:calue</code>的形式。</li>
</ol>
<ul>
<li><code>Host: www.baidu.com</code>表示请求的域名</li>
<li><code>User-Agent: curl/7.54.0</code>表示发起请求使用的软件及版本号</li>
<li><code>Accept: */*</code>表示接收所有</li>
<li><code>Content-Length: 10</code>表示第四部分内容的长度</li>
<li><code>Content-Type: application/x-www-form-urlencoded</code>标注第四部分内容的格式</li>
</ul>
<ol start="3">
<li>第三部分则是一个空行，主要作用分开第二部分与第四部分。</li>
<li>第四部分则是需要上传的数据。</li>
</ol>
<h3 id="HTTP响应"><a href="#HTTP响应" class="headerlink" title="HTTP响应"></a>HTTP响应</h3><p>响应是对请求做出的回应，其内容格式类似请求，也主要由4部分组成：</p>
<blockquote>
<p>HTTP/1.1 302 Found<br>Connection: Keep-Alive<br>Content-Length: 17931<br>Content-Type: text/html<br>Date: Tue, 10 Oct 2017 09:19:47 GMT<br>Etag: “54d9749e-460b”<br>Server: bfe/1.0.8.18</p>
<p>\<html><br>\<head><meta name="generator" content="Hexo 3.9.0"><br>\<meta http-equiv="content-type" content="text/html;charset=utf-8"> ……</head></html></p>
</blockquote>
<p>响应格式：</p>
<blockquote>
<p>1 协议/版本号 状态码 状态解释<br>2 Key1: value1<br>2 Key2: value2<br>2 Content-Length: 17931<br>2 Content-Type: text/html<br>3<br>4 要下载的内容</p>
</blockquote>
<ol>
<li>第一部分示例：<code>HTTP/1.1 200 OK</code><br><code>200</code>是一个状态码，表示响应的结果状态，后面对应的<code>OK</code>是状态解释。状态码以数字1、2、3、4、5开头，分为五种。</li>
<li>第二部分示例：</li>
</ol>
<ul>
<li><code>Connection: Keep-Alive</code></li>
<li><code>Content-Length: 17931</code>响应第四部分内容的长度</li>
<li><code>Content-Type: text/html</code>响应的内容格式</li>
<li><code>Date: Tue, 10 Oct 2017 09:19:47 GMT</code>响应的时间</li>
<li><code>Etag: &quot;54d9749e-460b&quot;</code>响应的标签</li>
<li><code>Server: bfe/1.0.8.18</code>响应的服务器</li>
</ul>
<ol start="3">
<li>第三部分依然是空行，分隔第二部分与第四部分</li>
<li>响应的内容，需要下载的内容</li>
</ol>
<h3 id="使用chrome查看请求与响应"><a href="#使用chrome查看请求与响应" class="headerlink" title="使用chrome查看请求与响应"></a>使用chrome查看请求与响应</h3><ol>
<li>打开「Network」</li>
<li>地址栏输入网址</li>
<li>打开开发者工具</li>
<li>在「Network」点击，查看 request，点击「view source」</li>
<li>点击「view source」</li>
<li>点击后可以看到请求的前三部分了</li>
<li>如果有请求的第四部分，那么在「FormData」或「Payload」里面可以看到</li>
</ol>
<h3 id="常见的HTTP状态码"><a href="#常见的HTTP状态码" class="headerlink" title="常见的HTTP状态码"></a>常见的HTTP状态码</h3><ul>
<li>1xx　Informational（信息性状态码）　接受的请求正在处理</li>
<li>2xx　Success（成功状态码）　请求正常处理完毕<ul>
<li>200 ok　表示响应成功，从客户端发来的请求在服务器被正常处理了。</li>
<li>204 No Content　表示服务器接受的请求已成功处理，但没有资源返回。</li>
<li>206 Partial Conyent　表示客户端进行了范围请求，服务器成功执行了这部分的GET请求。</li>
</ul>
</li>
<li>3xx　Redirection（重定向状态码）　需要进行的附加操作以完成请求<ul>
<li>301 Moved Permanently　表示永久性重定向，请求的资源已经被分配到新的URI。</li>
<li>302 Found　表示临时性重定向，请求的资源被分配了新的URI，希望用户此次使用新的URI访问。</li>
<li>305 Use Proxy　表示被请求的资源必须通过指定代理才能被访问。</li>
</ul>
</li>
<li>4xx　Client Error（客户端错误状态码）　服务器无法处理请求<ul>
<li>400 Bad Request　表示请求报文中存在语法错误。</li>
<li>401 Unauthorized　表示发送的请求需要有通过HTTP认证的认证信息。</li>
<li>403 Forbidden　表示队请求的资源的访问被服务器拒绝了。</li>
<li>404 Not Found　服务器上无法找到请求的资源。</li>
</ul>
</li>
<li>5xx　Server（服务器错误状态码）　服务器处理请求出错<ul>
<li>500 Internet Server Error　表示服务器在执行请求时发生错误。 </li>
<li>503 Service Unavailable　表示服务器处于超负载或正在进行停机维护。</li>
</ul>
</li>
</ul>
<h2 id="使用curl命令发起请求"><a href="#使用curl命令发起请求" class="headerlink" title="使用curl命令发起请求"></a>使用curl命令发起请求</h2><p><code>curl -s -v -H &quot;Frank: xxx&quot; -- &quot;https://www.baidu.com&quot;</code><br>使用该命令可以创造一个请求，请求访问百度。<br><code>curl -X POST -s -v -H &quot;Frank: xxx&quot; -- &quot;https://www.baidu.com&quot;</code><br>新增的<code>-X POST</code>表示请求的方法为POST，没有这个则默认GET。<br><code>curl -X POST -d &quot;1234567890&quot; -s -v -H &quot;Frank: xxx&quot; -- &quot;https://www.baidu.com&quot;</code><br>新增的 <code>-d &quot;1234567890&quot;</code>d表示date数据，表示上传了引号中的数据。</p>
]]></content>
      <tags>
        <tag>学习笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>在deepin中安装node与npm</title>
    <url>/2018/08/16/%E5%9C%A8deepin%E4%B8%AD%E5%AE%89%E8%A3%85node%E4%B8%8Enpm/</url>
    <content><![CDATA[<p>最近装了deepin15.6，想安装http-server服务，结果报错，原来是npm版本太老，以下罗列几种node安装方式，这几种方式适用Linux/ubantu/deepin系统。</p>
<h2 id="1、官方途径：通过包管理器方式安装；"><a href="#1、官方途径：通过包管理器方式安装；" class="headerlink" title="1、官方途径：通过包管理器方式安装；"></a>1、官方途径：通过包管理器方式安装；</h2><p>node8版本：</p>
<blockquote>
<p>curl -sL <a href="https://deb.nodesource.com/setup_8.x" target="_blank" rel="noopener">https://deb.nodesource.com/setup_8.x</a> | sudo -E bash -<br>sudo apt-get install -y nodejs</p>
</blockquote>
<p>node10版本：</p>
<blockquote>
<p>curl -sL <a href="https://deb.nodesource.com/setup_10.x" target="_blank" rel="noopener">https://deb.nodesource.com/setup_10.x</a> | sudo -E bash -<br>sudo apt-get install -y nodejs<br>参考<a href="https://nodejs.org/zh-cn/download/package-manager/" target="_blank" rel="noopener">官方教程</a>,但是很奇怪，会报错，猜测deepin系统的原因。</p>
</blockquote>
<h2 id="2、通过源码编译安装"><a href="#2、通过源码编译安装" class="headerlink" title="2、通过源码编译安装"></a>2、通过源码编译安装</h2><p>在<a href="https://nodejs.org/en/download/" target="_blank" rel="noopener">node官网下载专区</a>找到系统对应的版本，鼠标右键复制下载链接。在终端中输入：<br>1.下载node</p>
<blockquote>
<p>wget <a href="https://nodejs.org/dist/v8.11.4/node-v8.11.4-linux-x64.tar.xz" target="_blank" rel="noopener">https://nodejs.org/dist/v8.11.4/node-v8.11.4-linux-x64.tar.xz</a> </p>
</blockquote>
<p>2.解压文件</p>
<blockquote>
<p>tar -xvf node-v8.11.4-linux-x64.tar.xz </p>
</blockquote>
<p>3.切换并查看node所在路径 </p>
<blockquote>
<p>cd node-v8.11.4-linux-x64/bin<br>pwd</p>
</blockquote>
<p>4.查看node版本</p>
<blockquote>
<p>node -v</p>
</blockquote>
<p>5.将node和npm设置为全局(注意路径为第3步的路径)</p>
<blockquote>
<p>sudo ln /home/ubuntu/node-v8.11.4-linux-x64/bin/node /usr/local/bin/node<br>sudo ln /home/ubuntu/node-v8.11.4-linux-x64/bin/npm /usr/local/bin/npm<br>pwd</p>
</blockquote>
<p>这种方法配置的环境容易出问题，在安装http-server时依然报错。</p>
<h2 id="3、使用自带的apt安装"><a href="#3、使用自带的apt安装" class="headerlink" title="3、使用自带的apt安装"></a>3、使用自带的apt安装</h2><p>1.安装node与npm</p>
<blockquote>
<p>sudo apt install nodejs-legacy<br>sudo apt install npm</p>
</blockquote>
<p>2.安装管理nodejs本身工具，n模块</p>
<blockquote>
<p>sudo npm install -g n</p>
</blockquote>
<p>3.升级node到制定版本，后面接版本号</p>
<blockquote>
<p>sudo n latest //最新版本<br>sudo n stable //稳定版本<br>sudo n lts //长期支持版本</p>
</blockquote>
<p>4.升级npm到最新版本</p>
<blockquote>
<p>sudo npm install npm@latest -g</p>
</blockquote>
<p>此种方法便于管理node版本。</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>经过测试，第三种方法在deepin上成功安装，目前没有遇到什么问题，推荐使用此种方法。</p>
]]></content>
      <tags>
        <tag>deepin系统相关</tag>
      </tags>
  </entry>
  <entry>
    <title>实现一个简单的jQuery</title>
    <url>/2018/08/01/%E5%AE%9E%E7%8E%B0%E4%B8%80%E4%B8%AA%E7%AE%80%E5%8D%95%E7%9A%84jQuery/</url>
    <content><![CDATA[<p>jQuery说到底是一个函数对象，一个通过原生js实现了某些功能的函数，被封装成了一个js对象。jQuery类似<code>{0:xx,1:xx,length:2,····}</code>的伪数组，知道原理后，我们自己也可以实现一个简单的<code>jQuery</code>。<br>实现简单的获取元素，增加class类，以及修改元素文本的功能。<br><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>一个简单的jQuery<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">  <span class="selector-class">.red</span>&#123;</span></span><br><span class="line"><span class="css">    <span class="selector-tag">color</span><span class="selector-pseudo">:red</span>;</span></span><br><span class="line">  &#125;</span><br><span class="line"><span class="css">  <span class="selector-class">.green</span>&#123;</span></span><br><span class="line"><span class="css">    <span class="selector-tag">color</span><span class="selector-pseudo">:green</span>;</span></span><br><span class="line">  &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"item1"</span>&gt;</span>第1项<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"item2"</span>&gt;</span>第2项<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"item3"</span>&gt;</span>第3项<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"item4"</span>&gt;</span>第4项<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">htmnl</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<h2 id="首先，通过原生JS实现上述功能"><a href="#首先，通过原生JS实现上述功能" class="headerlink" title="首先，通过原生JS实现上述功能"></a>首先，通过原生JS实现上述功能</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//获取所有的li元素</span></span><br><span class="line"><span class="keyword">var</span> items = <span class="built_in">document</span>.querySelectorAll(<span class="string">'li'</span>);</span><br><span class="line"><span class="comment">//为所有的li增加red类</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; items.length; i++) &#123;</span><br><span class="line">  items[i].classList.add(<span class="string">'red'</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//修改所有的li文本</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; items.length; i++) &#123;</span><br><span class="line">  items[i].textContent = <span class="string">'hi'</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="封装这两个函数"><a href="#封装这两个函数" class="headerlink" title="封装这两个函数"></a>封装这两个函数</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> items = <span class="built_in">document</span>.querySelectorAll(<span class="string">'li'</span>);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">addClass</span>(<span class="params">e</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; items.length; i++) &#123;</span><br><span class="line">    items[i].classList.add(e);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">addClass(<span class="string">'red'</span>);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">setText</span>(<span class="params">e</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; items.length; i++) &#123;</span><br><span class="line">    items[i].textContent = e;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">setText(<span class="string">'hi'</span>);</span><br></pre></td></tr></table></figure>
<h2 id="将上面的对象及方法封装成一个对象，并对空间命名"><a href="#将上面的对象及方法封装成一个对象，并对空间命名" class="headerlink" title="将上面的对象及方法封装成一个对象，并对空间命名"></a>将上面的对象及方法封装成一个对象，并对空间命名</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> node = &#123;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> items = <span class="built_in">document</span>.querySelectorAll(<span class="string">'li'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; items.length; i++) &#123;</span><br><span class="line">  node[i] = items[i];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">node.length = items.length;</span><br><span class="line"></span><br><span class="line">node.addClass = <span class="function"><span class="keyword">function</span> (<span class="params">e</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; node.length; i++) &#123;</span><br><span class="line">    node[i].classList.add(e);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">node.setText = <span class="function"><span class="keyword">function</span> (<span class="params">e</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; node.length; i++) &#123;</span><br><span class="line">    node[i].textContent = e;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">node.addClass(<span class="string">'red'</span>)</span><br><span class="line">node.setText(<span class="string">'hi'</span>)</span><br></pre></td></tr></table></figure>
<h2 id="把node对象也封装进去，使它变成一个函数对象，更像jQuery"><a href="#把node对象也封装进去，使它变成一个函数对象，更像jQuery" class="headerlink" title="把node对象也封装进去，使它变成一个函数对象，更像jQuery"></a>把node对象也封装进去，使它变成一个函数对象，更像jQuery</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">window</span>.jQuery = <span class="function"><span class="keyword">function</span> (<span class="params">nodeorselector</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">var</span> node = &#123;&#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> items = <span class="built_in">document</span>.querySelectorAll(nodeorselector);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; items.length; i++) &#123;</span><br><span class="line">    node[i] = items[i];</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  node.length = items.length;</span><br><span class="line"></span><br><span class="line">  node.addClass = <span class="function"><span class="keyword">function</span> (<span class="params">e</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="keyword">this</span>.length; i++) &#123;</span><br><span class="line">      <span class="keyword">this</span>[i].classList.add(e);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  node.setText = <span class="function"><span class="keyword">function</span> (<span class="params">e</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="keyword">this</span>.length; i++) &#123;</span><br><span class="line">      <span class="keyword">this</span>[i].textContent = e;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> ndoe;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> $li = jQuery(<span class="string">'li'</span>);</span><br><span class="line">$li.addClass(<span class="string">'red'</span>);</span><br><span class="line">$li.setText(<span class="string">'hi'</span>);</span><br></pre></td></tr></table></figure>
<p>最后，<code>console.log($li)</code>可以看到一个如图所示的伪数组，有<code>addClass</code>方法与<code>setText</code>方法，<code>jQuery</code>本质也是如此，便可以对jQuery有更深的认识。<br><img src="https://upload-images.jianshu.io/upload_images/12812641-571fa12f2b8e149f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="$li实际上是一个对象"></p>
]]></content>
  </entry>
  <entry>
    <title>浅谈Js原型与原型链</title>
    <url>/2018/07/28/%E6%B5%85%E8%B0%88Js%E5%8E%9F%E5%9E%8B%E4%B8%8E%E5%8E%9F%E5%9E%8B%E9%93%BE/</url>
    <content><![CDATA[<p>关于JS面向对象，我们首先需要了解的一个问题，就是什么是内存！</p>
<h2 id="var-a-1-发生了什么？"><a href="#var-a-1-发生了什么？" class="headerlink" title="var a = 1 发生了什么？"></a><code>var a = 1</code> 发生了什么？</h2><p> &nbsp; &nbsp;我们常说的内存是指的插在电脑上的内存条，一个8g的内存条大概40%分配给系统，大概1G分配给浏览器，而分配给浏览的1G中大概200m分配给了JS。电脑只存0跟1，我们的代码存到内存里会经过一些列操作。<br> &nbsp; &nbsp;内存有栈内存(Stack)与堆内存(Heap)，JS中简单类型(number、string、boolean、symble、null、undefined)的值一般储存在Stack栈内存中，复杂类型的值储存在Heap堆内存(以Heap地址存入，一般是对地址的引用)，以下以简单的图示声明到内存发生的操作。</p>
<blockquote>
<p><strong>简单类型的值一般操作Stack栈内存</strong><br><strong>复杂类型值同时操作Stack栈内存与Heap堆内存</strong></p>
<p>以下为一些内存的简单示意<br> <img src="https://upload-images.jianshu.io/upload_images/12812641-3b2cc58f402de362.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="a"><br><img src="https://upload-images.jianshu.io/upload_images/12812641-171878c0d4498d13.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="b"><br><img src="https://upload-images.jianshu.io/upload_images/12812641-b498bc0d28700760.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="c"><br><img src="https://upload-images.jianshu.io/upload_images/12812641-548638a7036913a6.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="d"></p>
</blockquote>
<p>对于上述代码中都有一个b=a的操作，这称为“拷贝”，将栈内存与堆内存完全拷贝过来又称为“深拷贝”，对所有的基本类型而言都是深拷贝（因为没有堆内存）。对于复杂类型，只拷贝了栈内存而没有拷贝堆内存，就是“浅拷贝”。简单理解，b=a，b变不影响a就是深拷贝，b变导致a变就是浅拷贝。</p>
<h2 id="JS面向对象"><a href="#JS面向对象" class="headerlink" title="JS面向对象"></a>JS面向对象</h2><p>我们浏览器刚打开的时候，里面就内置了很多属性，这就是为什么一开始浏览器就占据很多内存的部分原因。对于浏览器自带的对象，全局对象global，浏览器里称为window。这些自带的属性中一部分是基于ECMAScript标准，一部分是浏览器自己的（私有的，不同浏览器不同），以谷歌浏览器为例：</p>
<ul>
<li>ECMAScript标准：<ul>
<li>parseInt</li>
<li>parseFloat</li>
<li>Number</li>
<li>Boolean</li>
<li>String</li>
<li>Object</li>
</ul>
</li>
<li>Google浏览器私有：<ul>
<li>alert（弹窗提示）</li>
<li>promote（用户填写）</li>
<li>confirm（确认）</li>
<li>console（开发者）</li>
<li>document（文档）DOM</li>
<li>history（浏览器）BOM</li>
</ul>
</li>
</ul>
<p>对于<code>var a = 1</code>，为什么可以调用toString方法就可以理解了。调用该方法的时候，浏览器会自动虚拟（拷贝）一个对象，然后调用其中的tostring，调用完后则消失。</p>
<h3 id="关于原型与原型链"><a href="#关于原型与原型链" class="headerlink" title="关于原型与原型链"></a>关于原型与原型链</h3><p>JavaScript 常被描述为一种基于原型的语言 (prototype-based language)——每个对象拥有一个原型对象，对象以其原型为模板、从原型继承方法和属性。原型对象也可能拥有原型，并从中继承方法和属性，一层一层、以此类推。这种关系常被称为原型链 (prototype chain)，它解释了为何一个对象会拥有定义在其他对象中的属性和方法。<br>准确地说，这些属性和方法定义在Object的构造器函数(constructor functions)之上的prototype属性上，而非对象实例本身。<br><img src="https://upload-images.jianshu.io/upload_images/12812641-738570ee957671b9.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="一个关于原型链的简单示意图"></p>
<blockquote>
<p>要记住的一个公式<br><code>var _______ = new ______</code><br>类型：对象&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;类型：函数对象<br>var 对象 = new 函数()<br>对象._ _proto_ _ == 函数.prototype</p>
</blockquote>
]]></content>
      <tags>
        <tag>技术</tag>
      </tags>
  </entry>
  <entry>
    <title>js中的数据类型转换</title>
    <url>/2018/07/24/js%E4%B8%AD%E7%9A%84%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E8%BD%AC%E6%8D%A2/</url>
    <content><![CDATA[<p>js中有6个基本数据类型：number、string、boolean、Symbol、null、undefined与一个复杂的数据类型object，object又可以分为三个子类型：狭义的对象object、数组array与函数function。这些数据类型之间有些是可以相互转换的，然而转换前我们得知道怎么判断这些数据类型。</p>
<h2 id="如何判断一个值的数据类型"><a href="#如何判断一个值的数据类型" class="headerlink" title="如何判断一个值的数据类型"></a>如何判断一个值的数据类型</h2><p>JavaScript 有三种方法，可以确定一个值到底是什么类型。</p>
<ul>
<li><code>typeof</code>运算符</li>
<li><code>instanceof</code>运算符</li>
<li><code>Object.prototype.toString</code>方法</li>
</ul>
<h4 id="typeOf运算符"><a href="#typeOf运算符" class="headerlink" title="typeOf运算符"></a>typeOf运算符</h4><p><code>typeOf</code>运算符可以返回一个值的数据类型，数值、字符串、布尔值分别返回<code>number</code>、<code>string</code>、<code>boolean</code>，<code>undefined</code>返回<code>undefined</code>，对象返回<code>obeject</code>，数组<code>[]</code>返回<code>object</code>。</p>
<blockquote>
<p>注意：函数则会返回<code>function</code>（虽然函数是个对象），<code>null</code>则会返回<code>object</code>（虽然null不是个对象 ，主要是为了兼容以前的代码）。</p>
</blockquote>
<h4 id="instanceof-运算符"><a href="#instanceof-运算符" class="headerlink" title="instanceof 运算符"></a>instanceof 运算符</h4><p>后面补充</p>
<h4 id="Object-prototype-toString方法"><a href="#Object-prototype-toString方法" class="headerlink" title="Object.prototype.toString方法"></a>Object.prototype.toString方法</h4><p>后面补充</p>
<h2 id="数据类型的转换"><a href="#数据类型的转换" class="headerlink" title="数据类型的转换"></a>数据类型的转换</h2><h3 id="手动转换"><a href="#手动转换" class="headerlink" title="手动转换"></a>手动转换</h3><p>手动转换主要有是三个方法：Number()、String()和Boolean()三个函数，手动将各类型的值分别转换成数字、字符串和布尔值。</p>
<h4 id="1-Number"><a href="#1-Number" class="headerlink" title="1.Number()"></a>1.Number()</h4><ol>
<li>原始类型值</li>
</ol>
<ul>
<li>数值：转换后还是原来的值。</li>
<li>字符串：如果可以被解析为数值，则转换为相应的数值。否则，返回<code>NaN</code>。<br>空字符串会转为0。</li>
<li>布尔值：<code>true</code>转成1，<code>false</code>转成0。</li>
<li><code>undefined</code>：转成<code>NaN</code>。</li>
<li><code>null</code>：转成0。</li>
</ul>
<ol start="2">
<li>对象</li>
</ol>
<ul>
<li><p>规则：对于对象，一般返回NaN，但是如果是包含单个数值的数组则会返回对应的数值。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Number</span>(&#123;<span class="attr">a</span>:<span class="number">1</span>&#125;) <span class="comment">// NaN</span></span><br><span class="line"><span class="built_in">Number</span>([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]) <span class="comment">// NaN</span></span><br><span class="line"><span class="built_in">Number</span>([<span class="number">4</span>]) <span class="comment">// 4</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>原因解析：涉及到Number的转换规则。</p>
<blockquote>
<p>1.调用对象自身的 <code>typeOf</code>方法。如果返回原始类型的值，则直接对该值使用<code>Number</code>函数，不再进行后续步骤。<br>2.如果<code>valueOf</code>方法返回的还是对象，则改为调用对象自身的<code>toString</code>方法。如果<code>toString</code>方法返回原始类型的值，则对该值使用<code>Number</code>函数，不再进行后续步骤。<br>3.如果<code>toString</code>方法返回的是对象，就报错。</p>
</blockquote>
</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;<span class="attr">x</span>: <span class="number">1</span>&#125;;</span><br><span class="line"><span class="built_in">Number</span>(obj) <span class="comment">// NaN</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">Number</span>(&#123;&#125;) <span class="comment">// NaN</span></span><br></pre></td></tr></table></figure>
<ol start="3">
<li>parseInt()与parseFloat()</li>
</ol>
<ul>
<li><code>parseInt</code>方法用于将字符串转为整数。<br>1、如果字符串头部有空格，空格会被自动去除。<code>parseInt(&#39;123&#39;) // 123</code><br>2、如果parseInt的参数不是字符串，则会先转为字符串再转换。<code>parseInt(&#39;   81&#39;) // 81</code><br>3、如果parseInt的参数不是字符串，则会先转为字符串再转换。<code>parseInt(1.23) // 1</code><br>4、字符串转为整数的时候，是一个个字符依次转换，如果遇到不能转为数字的字符，就不再进行下去，返回已经转好的部分。如果第一个便不能转化成数字，则会返回NaN。<code>parseInt(&#39;8a&#39;) // 8</code>,<code>parseInt(&#39;12.34&#39;) // 12</code>，<code>parseInt(&#39;abc&#39;) // NaN</code><br>5、parseInt方法还可以接受第二个参数（2到36之间），表示被解析的值的进制，返回该值对应的十进制数，默认为十进制。<code>parseInt(&#39;1000&#39;, 2) // 8</code>,<code>parseInt(&#39;1000&#39;) // 1000</code></li>
<li><code>parseFloat</code>方法用于将一个字符串转为浮点数。<br>1、如果字符串符合科学计数法，则会进行相应的转换。<br>2、如果字符串包含不能转为浮点数的字符，则不再进行往后转换，返回已经转好的部分。<br><code>parseFloat</code>方法会自动过滤字符串前导的空格。<br>3、如果参数不是字符串，或者字符串的第一个字符不能转化为浮点数，则返回NaN。</li>
</ul>
<h4 id="2-String"><a href="#2-String" class="headerlink" title="2. String()"></a>2. String()</h4><p><code>String</code>方法可以将任意类型的值转化成字符串。</p>
<ol>
<li>原始类型的值<br>数值、字符串、布尔值、undefined、null：转为相应的字符串。</li>
<li>对象<br>String方法的参数如果是对象，返回一个类型字符串；如果是数组，返回该数组的字符串形式。<br>背后的转换规则与<code>Number</code>方法基本相同,只是互换了valueOf方法和toString方法的执行顺序。<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">String</span>(&#123;<span class="attr">a</span>: <span class="number">1</span>&#125;) <span class="comment">// "[object Object]"</span></span><br></pre></td></tr></table></figure>
</li>
</ol>
<h4 id="3-Boolean"><a href="#3-Boolean" class="headerlink" title="3.Boolean()"></a>3.Boolean()</h4><p><code>Boolean</code>函数可以将任意类型的值转为布尔值。<br>转换规则：除了这五个值:<code>undefined、null、-0或0、NaN、&#39;&#39;(空字符串)</code>的转换结果为false，其余的值皆为<code>true</code>。<br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Boolean</span>(<span class="literal">undefined</span>) <span class="comment">// false</span></span><br><span class="line"><span class="built_in">Boolean</span>(<span class="literal">null</span>) <span class="comment">// false</span></span><br><span class="line"><span class="built_in">Boolean</span>(<span class="number">0</span>) <span class="comment">// false</span></span><br><span class="line"><span class="built_in">Boolean</span>(<span class="literal">NaN</span>) <span class="comment">// false</span></span><br><span class="line"><span class="built_in">Boolean</span>(<span class="string">''</span>) <span class="comment">// false</span></span><br><span class="line"><span class="built_in">Boolean</span>(&#123;&#125;) <span class="comment">// true</span></span><br><span class="line"><span class="built_in">Boolean</span>([]) <span class="comment">// true</span></span><br><span class="line"><span class="built_in">Boolean</span>(<span class="keyword">new</span> <span class="built_in">Boolean</span>(<span class="literal">false</span>)) <span class="comment">// true</span></span><br></pre></td></tr></table></figure></p>
<h3 id="自动转换"><a href="#自动转换" class="headerlink" title="自动转换"></a>自动转换</h3><p>三种情况下的自动转换数据：</p>
<ol>
<li>不同类型的数据相互运算。</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="number">123</span> + <span class="string">'abc'</span> <span class="comment">// "123abc"</span></span><br></pre></td></tr></table></figure>
<ol start="2">
<li>对非布尔值类型的数据求布尔值。</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="string">'abc'</span>) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'hello'</span>)</span><br><span class="line">&#125;  <span class="comment">// "hello"</span></span><br></pre></td></tr></table></figure>
<ol start="3">
<li>对非数值类型的值使用一元运算符（即<code>+</code>和<code>-</code>）。</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">+ &#123;<span class="attr">foo</span>: <span class="string">'bar'</span>&#125; <span class="comment">// NaN</span></span><br><span class="line">+<span class="string">'abc'</span> <span class="comment">// NaN</span></span><br><span class="line">- [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>] <span class="comment">// NaN</span></span><br><span class="line"><span class="string">'1'</span> + <span class="number">0</span> <span class="comment">// 1</span></span><br><span class="line">+ <span class="string">'1'</span> <span class="comment">// 1</span></span><br><span class="line">+ <span class="literal">true</span> <span class="comment">// 1</span></span><br><span class="line"><span class="string">''</span> + <span class="literal">null</span> <span class="comment">// 'null'</span></span><br></pre></td></tr></table></figure>
<h4 id="自动转换成布尔值"><a href="#自动转换成布尔值" class="headerlink" title="自动转换成布尔值"></a>自动转换成布尔值</h4><p>JavaScript 遇到预期为布尔值的地方（比如if语句的条件部分），就会将非布尔值的参数自动转换为布尔值。系统内部会自动调用Boolean函数。</p>
<h4 id="自动转换成字符串"><a href="#自动转换成字符串" class="headerlink" title="自动转换成字符串"></a>自动转换成字符串</h4><p>JavaScript 遇到预期为数值的地方，就会将参数值自动转换为数值。系统内部会自动调用Number函数。<br>除了加法运算符（+）有可能把运算子转为字符串，其他运算符都会把运算子自动转成数值。</p>
]]></content>
      <tags>
        <tag>技术</tag>
      </tags>
  </entry>
  <entry>
    <title>js中的数据类型</title>
    <url>/2018/07/21/js%E4%B8%AD%E7%9A%84%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/</url>
    <content><![CDATA[<p>JS中的数据类型一共有7种：</p>
<ul>
<li>基本类型（简单类型）：数值（number）、字符串（string）、布尔值（boolean）、Symbol（ES6种新增的一种）、null、undefined。</li>
<li>复杂类型（由简单类型组成）：对象（object）。</li>
</ul>
<h2 id="数值（number）"><a href="#数值（number）" class="headerlink" title="数值（number）"></a>数值（number）</h2><ol>
<li>整数与浮点数：JavaScript内部，所有数字都是以64位浮点数形式储存。</li>
<li><p>数值精度：JavaScript 浮点数的64个二进制位，从最左边开始，是这样组成的。</p>
<ul>
<li>第1位：符号位，<code>0</code>表示正数，<code>1</code>表示负数，决定一个数的正负。</li>
<li>第2位到第12位（共11位）：指数部分，决定数值的大小。<br>JavaScript 能够表示的数值范围为2的1024次方到2的-1023次方（开区间），超出这个范围的数无法表示。</li>
<li>第13位到第64位（共52位）：小数部分（即有效数字），决定数值的精度。<br>精度最多只能到53个二进制位，绝对值小于等于2的53次方的整数，即-253到253，都可以精确表示。</li>
</ul>
</li>
<li><p>数值的表示方法：</p>
<ul>
<li>十进制：没有前导0的数值。</li>
<li>八进制：有前缀<code>0o</code>或<code>0O</code>的数值，或者有前导0、且只用到0-7的八个阿拉伯数字的数值。<code>0xff // 255</code></li>
<li>十六进制：有前缀<code>0x</code>或<code>0X</code>的数值。<code>0o377 // 255</code></li>
<li>二进制：有前缀<code>0b</code>或<code>0B</code>的数值。<code>0b11 // 3</code></li>
<li>科学计数法：科学计数法允许字母e或E的后面，跟着一个整数，表示这个数值的指数部分。<code>123e3 // 12300</code>、<code>123e-3 // 0.123</code></li>
</ul>
</li>
<li><p>NaN:非数字，主要出现在将字符串解析成数字出现错误的场合。<code>5-&#39;x&#39; // NaN</code><br>NaN不等于任何值，包括它本身。</p>
</li>
<li><p>数值相关的方法：</p>
<ul>
<li><code>parseInt()</code>将字符串转为整数，接收第二个参数(2~36)，被解析值的进制。</li>
<li><code>parseFloar()</code>将一个字符串转为浮点数。</li>
<li><code>isNaN()</code>判断一个值是否为NaN。</li>
<li><code>isFinite()</code>返回一个布尔值，判断这只是否为正常的数值。除了<code>Infinity</code>、<code>-Infinity</code>、<code>NaN</code>和<code>undefined</code>这几个值会返回<code>false</code>，<code>isFinite</code>对于其他的数值都会返回<code>true</code>。</li>
</ul>
</li>
</ol>
<h2 id="字符串（string）"><a href="#字符串（string）" class="headerlink" title="字符串（string）"></a>字符串（string）</h2><p>字符串就是零个或多个排在一起的字符，放在单引号或双引号之中。</p>
<ol>
<li><p>多行字符串实现：（字符串默认只能写在一行内。）</p>
<ul>
<li>可以在每行末尾使用反斜杠。</li>
<li>使用运算符<code>+</code></li>
<li>运用多行注释的变通方法</li>
<li>ES6中添加一个方式，键盘1旁边的符号包围字符串，默认单行字符串末尾有空格<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="string">`1234</span></span><br><span class="line"><span class="string">6789`</span></span><br><span class="line">a.lenth = <span class="number">9</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>反斜杠（\）转义符，在某些字符前面表示特殊含义，如<code>\n</code>表示换行。</p>
</li>
<li>字符串可以被视为字符数组，可以使用数组的方括号运算符，用来返回某个位置的字符（位置编号从0开始），但是无法改变字符串。</li>
<li><code>length</code>属性返回字符串的长度，也是无法改变的。</li>
<li>字符串中存在unicod字符时，会自动转为字面进行识别。</li>
</ol>
<h2 id="布尔值、null与undefined"><a href="#布尔值、null与undefined" class="headerlink" title="布尔值、null与undefined"></a>布尔值、null与undefined</h2><ol>
<li>布尔值只有“真（true）”与“假（false）”两个状态。<ul>
<li>常用操作符：<code>&amp;&amp;</code>与（两者均为真）;<code>||</code>或（其中一者为真）;<code>！</code>非（相反）;</li>
<li><code>undefined</code>,<code>null</code>,<code>false</code>,<code>0</code>,<code>NaN</code>,<code>&#39;&#39;、</code>“”<code>（空字符串）如果是布尔值会被转为</code>false<code>，其余都会被转为</code>true`.</li>
<li>空数组（[]）、空对象（{}）对应的布尔值都是<code>true</code>.</li>
</ul>
</li>
<li>null 和 undefined很相似，都可以表示“没有”<br>区别：<ul>
<li>a. 变量没有赋值—-undefined。<br>b. 有一个对象object，不想赋值—-null。<br>&nbsp;&nbsp;&nbsp;&nbsp;有一个非对象，不想赋值—-undefined（这两个是推荐用法，惯例）。</li>
<li><code>null</code>表示“空值”，<code>undefined</code>表示“未定义”。</li>
</ul>
</li>
</ol>
<h2 id="对象（object）"><a href="#对象（object）" class="headerlink" title="对象（object）"></a>对象（object）</h2><p>对象是一组“键名-键值对”（key-value）的集合，是一种无序的复合数据集合，可以理解为哈希表。<code>{&#39;key&#39;:&#39;value&#39;,&#39;key&#39;:&#39;value&#39;,&#39;key&#39;:&#39;value&#39;,·······}</code></p>
<ol>
<li><p>键名与键值：</p>
<ul>
<li>键名是数值则会自动转为字符串</li>
<li>如果键名不符合标识名的条件（比如第一个字符为数字，或者含有空格或运算符），且也不是数字，则必须加上引号，否则会报错。</li>
<li>对象的每一个键名又称为“属性”（property），它的“键值”可以是任何数据</li>
</ul>
</li>
<li><p>属性的相关操作：</p>
<ul>
<li>读取：两种方法：<br>&nbsp;a.点运算符<code>obj.p</code>，数字键不能使用点运算符。<br>&nbsp;b.方括号运算符<code>obj[&#39;p&#39;]</code>。<br>&nbsp;&nbsp;&nbsp;&nbsp;方括号内部可以使用表达式。<br>&nbsp;&nbsp;&nbsp;&nbsp;数字键不加引号会自动转成字符串。</li>
<li>赋值：<code>obj.foo = &#39;hello&#39;</code>,<code>obj[&#39;foo&#39;] = &#39;hello&#39;</code>。</li>
<li>查看：使用<code>Object.keys</code>查看一个对象本身的所有属性。</li>
<li>删除：使用<code>delete</code>命令即可删除一个属性，<code>delete pbj.p // true</code>,删除成功返回true。</li>
<li>属性是否存在： <code>in</code>运算符。<code>&#39;toString&#39; in obj</code>，但是不能识别哪些属性是对象自身的，哪些属性是继承的。利用hasOwnPorperty方法判断，是否为自身属性。</li>
<li>属性遍历：利用<code>for...in</code>循环。<ul>
<li>它遍历的是对象所有可遍历（enumerable）的属性，会跳过不可遍历的属性。</li>
<li>它不仅遍历对象自身的属性，还遍历继承的属性。</li>
</ul>
</li>
</ul>
</li>
<li><p>with语句：格式如下：</p>
 <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">with</span> (对象)&#123;</span><br><span class="line">    语句;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ol>
<p>&nbsp;&nbsp;&nbsp;&nbsp;作用：操作同一个对象的多个属性时，提供一些书写的方便。（少用）</p>
]]></content>
      <tags>
        <tag>技术</tag>
      </tags>
  </entry>
  <entry>
    <title>css页面位置的一些相关问题</title>
    <url>/2018/07/08/css%E9%A1%B5%E9%9D%A2%E7%9A%84%E4%B8%80%E4%BA%9B%E4%BD%8D%E7%BD%AE%E7%9B%B8%E5%85%B3%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<h2 id="左右布局"><a href="#左右布局" class="headerlink" title="左右布局"></a>左右布局</h2><p>&emsp;关于页面布局，正常情况下是按“文档流”来走的，也就是从上到下布局。如果要实现左右布局（横向布局）的话，则需要破坏正常的文档流。一般我们使用<code>float</code>来实现：<img src="https://upload-images.jianshu.io/upload_images/12812641-bffab616a4cab188.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="左右布局"><br>我们会发现棕色的色向上移动了,而里面的文本C却没有发生变化。这就是浮动发生后发生的脱离文档流带来的bug。所以我们一般在浮动后都会给其父元素添加属性消除浮动带来的影响：</p>
<blockquote>
<p>.clearfix::after {<br>&emsp; content:’’;<br>&emsp;display:block;<br>&emsp;clear:both;<br>}<br><img src="https://upload-images.jianshu.io/upload_images/12812641-251d96f99a0a0f15.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="清除浮动"></p>
</blockquote>
<h2 id="左中右布局"><a href="#左中右布局" class="headerlink" title="左中右布局"></a>左中右布局</h2><p>左中右布局也属于横向布局，其实就在右边再加一个<code>&lt;div&gt;</code>而已。再就利用定位属性，在页面中实现左中右布局。</p>
<h2 id="水平居中"><a href="#水平居中" class="headerlink" title="水平居中"></a>水平居中</h2><p>实现水平居中的方式有多种，常见的：</p>
<ul>
<li>如果是文本的话，使用<code>text-align=&quot;center&quot;</code>即可实现；</li>
<li>如果是块状元素的话，直接通过设置<code>margin: 0 auto;</code>即可实现<code>&lt;div&gt;</code>居中；</li>
</ul>
<p><img src="https://upload-images.jianshu.io/upload_images/12812641-967469b306ae2890.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="左右居中"></p>
<h2 id="垂直居中"><a href="#垂直居中" class="headerlink" title="垂直居中"></a>垂直居中</h2><p>实现垂直居中并不容易，目前最基本的几种方式：</p>
<ul>
<li>文本居中利用文字行高等于所在元素高度：<code>line-height</code>=<code>height</code>实现；如果知道文本确切的行高与其高度，则可以利用padding上下相等实现文本居中。</li>
<li><code>&lt;div&gt;</code>居中最简单的利用上下<code>margin</code>相等或者<code>margin: auto 0;</code>实现；</li>
<li>当父元素高度由子元素高度决定时，则可以设置上下<code>padding</code>相等实现垂直居中。或者知道确切的父子元素的高度，也可以通过合理的设计实现垂直居中。<img src="https://upload-images.jianshu.io/upload_images/12812641-b81ebce275b1be53.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="垂直居中"></li>
</ul>
]]></content>
  </entry>
  <entry>
    <title>浅谈HTNL常用标签</title>
    <url>/2018/07/05/%E6%B5%85%E8%B0%88HTNL%E5%B8%B8%E7%94%A8%E6%A0%87%E7%AD%BE/</url>
    <content><![CDATA[<h1 id="HTML常用标签"><a href="#HTML常用标签" class="headerlink" title="HTML常用标签"></a>HTML常用标签</h1><p>HTML常用标签有：a、form、input、button、h1、p、ul、ol、small、strong、div、span、kbd、video、audio、svg等等。</p>
<h2 id="组成文档结构的标签"><a href="#组成文档结构的标签" class="headerlink" title="组成文档结构的标签"></a>组成文档结构的标签</h2><p>主要用来构成整个文档大概的框架：<code>&lt;head&gt;</code>、<code>&lt;title&gt;</code>、<code>&lt;body&gt;</code>、<code>&lt;h1&gt;</code>、<code>&lt;p&gt;</code>、<code>&lt;ul&gt;</code>、<code>&lt;ol&gt;</code>、<code>&lt;ol&gt;</code>、<code>&lt;li&gt;</code>、<code>&lt;div&gt;</code>、<code>&lt;span&gt;</code>等等。</p>
<ul>
<li><code>&lt;head&gt;</code>、<code>&lt;body&gt;</code>标签<br>组成整个页面的头和身体，大部分内容放在<code>&lt;body&gt;</code>中，<code>&lt;head&gt;</code>中有一般只有一个标题<code>&lt;title&gt;</code>。</li>
<li><code>&lt;h1&gt;</code>标题标签，<br>一共有6个从<code>&lt;h1&gt;</code>~<code>&lt;h6&gt;</code>，对应着6级标题，反正够你用了。<br>其中<code>&lt;h1&gt;</code>~<code>&lt;h3&gt;</code>对浏览器友好，意思就是这三个标题能够更容易被浏览器搜索到。</li>
<li><code>&lt;p&gt;</code>段落标签（paragraph）<br>用来标识一段段落的。</li>
<li><code>&lt;div&gt;</code>盒标签（盒模型）<br>我们常说的盒模型就指的<code>&lt;div&gt;</code>，主要作用就是把页面划分成一块一块，就像一个盒子般，里面嵌套其它内容。</li>
<li><code>&lt;span&gt;</code>块标签<br>作用类似于<code>&lt;div&gt;</code>，但是<code>&lt;span&gt;</code>是把一行里面的内容分块。</li>
<li><code>&lt;ul&gt;</code>、<code>&lt;ol&gt;</code>、<code>&lt;li&gt;</code>列表标签<br><code>&lt;ul&gt;</code>或<code>&lt;ol&gt;</code>包含几个<code>&lt;li&gt;</code>组成一个列表。<br><code>&lt;ul&gt;</code>(unordered list)无序列表，展现的列表是无序的，<code>&lt;li&gt;</code>前面一般是一个标志。而<code>&lt;ol&gt;</code>(ordered list)是有序列表，<code>&lt;li&gt;</code>前面会自动排序。</li>
</ul>
<h2 id="多媒体嵌入"><a href="#多媒体嵌入" class="headerlink" title="多媒体嵌入"></a>多媒体嵌入</h2><p>主要用来插入一些多媒体内容：<code>&lt;img&gt;</code>、<code>&lt;video&gt;</code>、<code>&lt;audio&gt;</code>、<code>&lt;ifram&gt;</code>、<code>&lt;svg&gt;</code>。</p>
<ul>
<li><code>&lt;img&gt;</code>插入图片<ol>
<li><code>src</code>图片的来源。</li>
<li><code>alt</code>图片无法正常加载时显示的内容。</li>
<li><code>title</code>鼠标悬停在图片上显示的内容。</li>
</ol>
</li>
<li><code>&lt;video&gt;</code>插入视屏、<code>&lt;audio&gt;</code>插入音频<br>   <code>src</code>视屏来源 </li>
<li><code>&lt;ifram&gt;</code>插入网页（少用）</li>
<li><code>&lt;svg&gt;</code>插入画板</li>
</ul>
<h2 id="文本内容修饰的标签"><a href="#文本内容修饰的标签" class="headerlink" title="文本内容修饰的标签"></a>文本内容修饰的标签</h2><p>主要用来修饰文本内容：<code>&lt;a&gt;</code>、<code>&lt;small&gt;</code>、<code>&lt;strong&gt;</code>、<code>&lt;em&gt;</code>等等</p>
<ul>
<li><code>&lt;a&gt;</code>（anchor锚点）超链接标签（使用GET方法跳转页面）<br>可以创建一个到其他网页、文件、同一页面内的位置、电子邮件地址或任何其他URL的超链接。<ul>
<li>href属性：<br>  如果指向域名则跳转对应的域名(<a href="http://qq.com" target="_blank" rel="noopener">http://qq.com</a>) ，如果指向文件（http中存在Content-Type：application）则下载文件。（不支持file协议）。<br>  #锚点，页面跳转后不发起请求，跳转到顶部。<br>  伪协议：后接一段JavaScript代码，直接实现代码。<code>javascript: alert(&#39;1&#39;)</code>弹出对话框1，<code>javascript: ;</code>点击后什么都不做。</li>
<li>target属性：<ol>
<li>“_blank” 在新页面打开</li>
<li>“_self” 在当前页面打开</li>
<li>“_parent” 当存在<code>&lt;ifram&gt;</code>时会在父页面打开</li>
<li>“_top”当存在多个<code>&lt;ifram&gt;</code>（≥3）时，会在最外层页面打开</li>
</ol>
</li>
<li>download属性：表示a标签不再跳转链接，而是强制下载文件，href是域名则下载网页。</li>
</ul>
</li>
<li><code>&lt;strong&gt;</code>加粗标签<br>表示文本十分重要，一般用粗体显示。不同于<code>&lt;b&gt;</code>标签（同样加粗文本），<code>&lt;strong&gt;</code>强调内容与形式，内容很重要，而<code>&lt;b&gt;</code>强调形式。</li>
<li><code>&lt;small&gt;</code>缩小标签<br>使文本的字体变小一号，一般被定义为表示边注释和附属细则。</li>
<li><code>&lt;em&gt;</code>斜体标签<br>使文本内容变成斜体，标记出需要用户着重阅读的内容。与<code>&lt;strong&gt;</code>类似，<code>&lt;em&gt;</code>也有一个<code>&lt;i&gt;</code>标签表示斜体。同样的，<code>&lt;em&gt;</code>强调内容与形式，内容很重要，而<code>&lt;i&gt;</code>强调形式。</li>
</ul>
<h2 id="HTML表单"><a href="#HTML表单" class="headerlink" title="HTML表单"></a>HTML表单</h2><p>常用来提交内容：<code>&lt;form&gt;</code>、<code>&lt;input&gt;</code>、<code>&lt;button&gt;</code>、<code>&lt;label&gt;</code></p>
<ul>
<li><code>&lt;form&gt;</code>主要用来提交内容(使用POST方法跳转页面，提交的内容放在请求的第四部分)<ol>
<li>action属性：发起请求后跳转的页面。</li>
<li><code>method=&quot;post&quot;</code>（默认为GET）使用POST发起请求。</li>
<li><code>target</code>同<code>&lt;a&gt;</code>标签</li>
</ol>
</li>
<li><code>&lt;input&gt;</code>标签<ol>
<li><code>type=&quot;submit&quot;</code>：提交按钮（如果<code>&lt;form&gt;</code>没有submit则无法提交）<br>如果一个只有一个按钮<code>&lt;button&gt;</code>，会自动升级为提交按钮。<br>如果该标签明确定义type=“button”，则不会升级，依然为按钮。</li>
<li><code>type=&quot;checkbox&quot;</code>多选框<code>&lt;type=“radio”&gt;</code>单选框<ol>
<li>两者均必须使用 value 属性定义此控件被提交时的值，使用 checked 属性指示控件是否被选择。</li>
<li><code>&lt;label&gt;</code>标签：通常将按钮囊括在里面，点击囊括在内的任何区域都视为被选择。<br> <code>&lt;label&gt;&lt;input type=&quot;checkbox&quot;&gt;爱我&lt;/label&gt;</code>当点击爱我时，没有点击按钮，也会被视为被选中了。<br> 也可以把<code>&lt;label&gt;</code>放在里面将内容囊括起来，利用for属性与id属性达到同样的效果.<br> <code>&lt;input type=&quot;checkbox&quot; id=&quot;xxxx&quot;&gt;&lt;label for=&quot;xxx&quot;&gt;爱我&lt;/label&gt;</code></li>
</ol>
</li>
<li><code>type=&quot;select&quot;</code>下拉菜单选择<ol>
<li><code>&lt;option&gt;</code>标签下拉菜单的选项，<code>select</code>属性表示默认选择，<code>disabled</code>表示不可选中。</li>
<li><code>mutiple</code>属性表示多选</li>
</ol>
</li>
<li><code>type=&quot;textarea&quot;</code>输入文本框<ol>
<li><code>resize:none</code>文本框默认宽高不固定，该属性表示固定宽高。一般利用css固定宽高。</li>
<li><code>height: 100; width: 200;</code>设定文本框宽高，一般利用css固定宽高。</li>
<li><code>rows:10</code>文本框输入的内容设定的行数。</li>
</ol>
</li>
</ol>
</li>
</ul>
<h2 id="HTML表格"><a href="#HTML表格" class="headerlink" title="HTML表格"></a>HTML表格</h2><p>常用来表示数据（少用）：<code>&lt;table&gt;</code>标签里只能有以下标签</p>
<ul>
<li><code>&lt;thead&gt;</code>表头&gt;<code>&lt;tr&gt;</code>行（table row）&gt;<code>&lt;th&gt;</code>标题单元格</li>
<li><code>&lt;tbody&gt;</code>表格&gt;<code>&lt;tr&gt;</code>行&gt;<code>&lt;td&gt;</code>单元格（table data）</li>
<li><code>&lt;tfoot&gt;</code>表注</li>
</ul>
]]></content>
      <tags>
        <tag>技术文章</tag>
      </tags>
  </entry>
  <entry>
    <title>浅谈命令行与Git</title>
    <url>/2018/07/03/%E6%B5%85%E8%B0%88%E5%91%BD%E4%BB%A4%E8%A1%8C%E4%B8%8EGit/</url>
    <content><![CDATA[<h2 id="一些基本命令行的使用"><a href="#一些基本命令行的使用" class="headerlink" title="一些基本命令行的使用"></a>一些基本命令行的使用</h2><h3 id="ls"><a href="#ls" class="headerlink" title="ls"></a>ls</h3><p>用法：显示当前所在目录的所有文件。一般有三个参数，<br><code>ls -a</code>：显示全部文件，这里的全部文件包括平时看不见的隐藏文件（文件名以.开头）。<br><code>ls -l</code>：显示文件的更多信息。如图所示，可以看到一般有两种前缀：<code>drwxr-xr-x</code>，其中的d表示目录，r表示read可读，w表示write可写，x表示可读可写，后面的r-x、r-x分别表示主人与客人的权限，都是可读可写。最后的则是文件创建时间跟文件名字。<br><code>ls -al</code>：这个则是上述两种之和，实测windows上<code>ls -al</code>与<code>ls -la</code>作用一样，不知是不是所有命令行都是这样，后期可以探索下！</p>
<p><img src="https://video.jirengu.com/xdml/file/d86144a6-7fb6-45ce-9cbb-3af63788fcb8/2018-6-26-12-21-7.png" alt="ls命令演示"></p>
<h3 id="cat"><a href="#cat" class="headerlink" title="cat"></a>cat</h3><p>用法：常用来显示文件内容，后接文件名。</p>
<p><img src="https://video.jirengu.com/xdml/file/d86144a6-7fb6-45ce-9cbb-3af63788fcb8/2018-6-26-12-29-16.png" alt="cat命令演示"></p>
<h3 id="mv"><a href="#mv" class="headerlink" title="mv"></a>mv</h3><p>用法：常用来移动文件。<br>使用mv后面跟两个参数，源路径与目标路径。图中示例线罗列了两个目录中的文件，然后移动2.html，最终对比可以发现2.html从demo-2中移动到demo-1。</p>
<p><img src="https://video.jirengu.com/xdml/file/d86144a6-7fb6-45ce-9cbb-3af63788fcb8/2018-6-26-12-40-40.png" alt="mv命令演示.png"></p>
<h3 id="touch"><a href="#touch" class="headerlink" title="touch"></a>touch</h3><p>用法：常用来创建文件。<br>后接文件名，只能用来创建文件，不能用来创建目录，否则只会创建出一个不带后缀的文件。<br>当文件已经 存在的时候，则会覆盖文件，注意示意图中的时间可以判断。</p>
<p><img src="https://video.jirengu.com/xdml/file/d86144a6-7fb6-45ce-9cbb-3af63788fcb8/2018-6-26-13-5-50.png" alt="touch命令演示"></p>
<h3 id="使用explainshell-com网站"><a href="#使用explainshell-com网站" class="headerlink" title="使用explainshell.com网站"></a>使用<a href="https://explainshell.com" target="_blank" rel="noopener">explainshell.com</a>网站</h3><p>进入网站后，输入你想查询的命令，例如<code>ls</code>，查询后会显示该命令的意思，点击该命令则会显示<code>ls</code>的相关参数及用法。</p>
<p><img src="https://video.jirengu.com/xdml/file/d86144a6-7fb6-45ce-9cbb-3af63788fcb8/2018-6-26-14-22-58.png" alt></p>
<p><img src="https://video.jirengu.com/xdml/file/d86144a6-7fb6-45ce-9cbb-3af63788fcb8/2018-6-26-14-23-21.png" alt="explainshell.com使用示意图"></p>
<h2 id="git简单入门"><a href="#git简单入门" class="headerlink" title="git简单入门"></a>git简单入门</h2><h3 id="git-init"><a href="#git-init" class="headerlink" title="git init"></a>git init</h3><p><code>git inint</code>初始化本地仓库。它会在当成目录下初始化一个本地仓库，并自动生成一个隐藏的.git文件，这个.git文件就是本地仓库。<br>使用<code>ls -al</code>就可以发现多了一个.git文件。</p>
<h3 id="git-add"><a href="#git-add" class="headerlink" title="git add"></a>git add</h3><p>当前目录有三个区域，工作区、暂存区、本地仓库（.git文件）。<br><code>git add xxx</code>命令则是把xxx添加到暂存区中，如图中将1.txt文件添加到暂存区中。</p>
<h3 id="git-commit"><a href="#git-commit" class="headerlink" title="git commit"></a>git commit</h3><p><code>git commit -m &quot;xxxx&quot;</code>将暂存区中的内容（已经git add过的内容）提交到本地仓库中（.git），<code>-m &quot;xxxx&quot;</code>并为此次提交备注信息，方便以后查询。<br><code>git commit -v</code>提交时显示所有的更改diff，会与本地仓库对比。图中修改了1.txt文件内容。</p>
<p><img src="https://video.jirengu.com/xdml/file/d86144a6-7fb6-45ce-9cbb-3af63788fcb8/2018-6-26-14-48-11.png" alt><br><img src="https://video.jirengu.com/xdml/file/d86144a6-7fb6-45ce-9cbb-3af63788fcb8/2018-6-26-15-36-31.png" alt="git 入门示意图"></p>
]]></content>
      <tags>
        <tag>Git</tag>
      </tags>
  </entry>
  <entry>
    <title>第二篇博客</title>
    <url>/2018/06/26/%E7%AC%AC%E4%BA%8C%E7%AF%87%E5%8D%9A%E5%AE%A2/</url>
    <content><![CDATA[<p>这是我的第二篇博客，然而我还是没搞懂该怎么做它！！<br>我试试加点东西进去</p>
]]></content>
      <tags>
        <tag>技术文章</tag>
      </tags>
  </entry>
  <entry>
    <title>聊聊前端自学那些事吧</title>
    <url>/2018/06/26/%E5%86%99%E5%9C%A8%E5%89%8D%E9%9D%A2/</url>
    <content><![CDATA[<p>&nbsp;&nbsp;&nbsp;&nbsp;三个月前，我还是一个在工地搬砖的土木男。虽然在部门顶着个技术员的称号，实际上干的跟技术毫无关系的事，我曾经以为的技术工作不是这样的。于是在广东炙热的天气还未降临之前，我深思熟虑之后突然便决定辞职。<br>&nbsp;&nbsp;&nbsp;&nbsp;辞职之前我就已经想好要转行学计算机，毕竟这是我一直以来兴趣所在。其实刚开始是打算学习人工智能的，但了解后才发现学习到后面对高数及学历要求很高，目前对我而言不是个很好的选择，然后诸多思虑之后，便选择了前端，主要还是兴趣使然。</p>
<h2 id="在线下培训的那两周"><a href="#在线下培训的那两周" class="headerlink" title="在线下培训的那两周"></a>在线下培训的那两周</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;经同学介绍，我报了千峰的线下培训班，试听两周。线下培训班的学习真的很辛苦，我感觉那两周的学习认真程度堪比高考时的状态，很喜欢千峰的那句话,“拼搏到无能为力，坚持到感动自己”。但是最终我又为什么没有坚持下去呢，说到底毕竟还是盈利性质的培训机构。千峰的教学模式是先教你基本知识，然后通过大量的练习让你记住怎么用它，这样填鸭式的学习没有灵魂！前面两周教的html、css，学完的我基本会做一个静态页面了，但是并没有觉得自己学的很好，仅仅只是会照葫芦画瓢，仅仅是你会用了而已。就这样我申请了退学。</p>
<h2 id="在家自学的那两个月"><a href="#在家自学的那两个月" class="headerlink" title="在家自学的那两个月"></a>在家自学的那两个月</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;从千峰退学后，便开始了在家自学。很幸运的是，有个从事前端的高中同学，表示愿意带我一段时间。也很感谢他，让我对前端学习有了个清晰的认识。在他的建议下，我学会了关于程序员很重要的一些观念：</p>
<ul>
<li>科学上网</li>
<li>学会提问与找答案</li>
<li>前端学习的路径</li>
<li>学习前端该具备哪些入门知识</li>
</ul>
<p>&nbsp;&nbsp;&nbsp;&nbsp;除去在线下培训的那两周，真正开始入门的要数《JavaScript DOM 编程艺术》这本书，这本书真的很适合入门前端学习，它靠寥寥两三百的内容就告诉了你什么是前端，什么是JavaScript。于是，我便以这本书为起点开始了前端自学之路。由于之前已经学会了html、css（自以为学会了），在同学的建议下，我直接开始学习JavaScript——廖雪峰的JavaScript教程。我花了将近两周将JavaScript教程的前半段部分看完（实际上看完就差不多忘了），然后便开始一边看mdn学习JavaScript，一边看Vue官方文档入手学习Vue框架。期间，还看完了《图解HTTP》这本书与廖雪峰的Git教程，顺便学习了使用命令行（其实知识了解了下）。就这样学着学着，mdn基本看完了中级，Vue也学完了作者说的基础部分。按理说，终于可以开始自己写点东西，结果想用原生JavaScript实现Vue的一个小实例，发现光页面布局那块就卡住了，难以下手。我开始反思，自学两个月我都学会了什么？<br>&nbsp;&nbsp;&nbsp;&nbsp;其实，我都学会了，我只是还没学会怎么怎么用它，就像你拿着一把好剑，但是没有剑法，你也只会在那瞎挥舞，而不会真正制敌。最终，我花钱请了腾讯阿里的大佬来教我（满满的套路），这位大佬名为饥人谷，一位有灵魂的前端工程师，他还有这一堆手下（坏笑）。好了，关于前端自学，我稍微总结了一下自己失败的缘由：</p>
<ul>
<li>一个人的战斗——太累。</li>
<li>学习方式其实错了，只有输入（还不是好的输入），没有输出，学习效率低。</li>
<li>没法掌控自己的进度，没法判断自己学的好坏。</li>
<li>容易走错路，虽然说自己走过的坑才有意义。但是路太长，很容易死在路上。</li>
<li>习惯——自学是无法养成良好的习惯的，比如写博客！</li>
</ul>
<p>学习很苦，自学很难，但是尝试过才清楚自己能力，因为我是转行，不敢再消耗时间，最后附上一篇自以为的一般前端学习路径吧！</p>
<ol>
<li>HTML、CSS</li>
<li>JavaScript（DOM、AJAX、WebAPI）</li>
<li>jQuery库（个人觉得没必要学，但是学习有益于前端理解，学肯定比不学好）</li>
<li>Vue、React、Bootstrap等一些框架</li>
<li>ES5/ES6标准</li>
<li>node.js（主学）、PHP一些后端知识</li>
<li>微信小程序</li>
<li>一些可以说前端必备的基础知识：命令行、Git、HTTP、甚至TCP/IP等等</li>
</ol>
<p>最后前端还需要补充的一些前端工程化，JavaScript设计模式，一些基本的数据结构与算法。前端很杂要学的很多，听说node.js又要改了（绝望ing），听说后面又要出新的框架了（我胡诌的），再后面。。。。我就是一名全栈工程师了（牛上天了）。<br>&nbsp;&nbsp;&nbsp;&nbsp;总之，竟然选择了前端，要学的东西很多！</p>
]]></content>
      <tags>
        <tag>随笔</tag>
      </tags>
  </entry>
</search>
